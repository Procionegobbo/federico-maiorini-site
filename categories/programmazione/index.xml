<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programmazione on Federico Maiorini</title><link>https://procionegobbo.it/categories/programmazione/</link><description>Recent content in Programmazione on Federico Maiorini</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Thu, 04 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://procionegobbo.it/categories/programmazione/index.xml" rel="self" type="application/rss+xml"/><item><title>Developer's daemons</title><link>https://procionegobbo.it/blog/developers-daemons/</link><pubDate>Thu, 04 Sep 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/developers-daemons/</guid><description>&lt;img src="https://procionegobbo.it/blog/developers-daemons/developer-daemons.jpeg" alt="Featured image of post Developer's daemons" />&lt;p>&lt;em>(The English version of this article is provided after the Italian one. / La versione inglese di questo articolo si trova dopo quella in italiano)&lt;/em>&lt;/p>
&lt;h1 id="i-due-demoni-dello-sviluppatore">I due demoni dello sviluppatore
&lt;/h1>&lt;p>Ogni sviluppatore convive con due &lt;strong>demoni interiori&lt;/strong>.&lt;br>
E se cogliete il gioco di parole, siete probabilmente sviluppatori o almeno un po’ nerd: nei sistemi operativi i processi che lavorano silenziosi in background, invisibili ma indispensabili, si chiamano infatti &lt;em>daemon&lt;/em> (o &lt;em>demoni&lt;/em> in italiano).&lt;/p>
&lt;h2 id="il-demone-della-superbia">Il demone della superbia
&lt;/h2>&lt;p>Il primo demone nasce nel momento in cui scriviamo il nostro &lt;strong>primo programma funzionante&lt;/strong>.&lt;br>
Un “Hello World”, un disegno a schermo, un piccolo script che semplifica un compito noioso.&lt;br>
In quell’istante compare una sensazione potente: &lt;em>“Posso dare ordini a una macchina, e lei li eseguirà”&lt;/em>. È un piccolo &lt;strong>delirio di onnipotenza&lt;/strong> che accompagna quasi tutti gli sviluppatori per il resto della carriera.&lt;/p>
&lt;p>Da quel momento in poi, la tentazione di piegare la realtà al proprio codice rimane sempre attiva, come un processo in background difficile da spegnere.&lt;/p>
&lt;h2 id="il-demone-della-pigrizia">Il demone della pigrizia
&lt;/h2>&lt;p>Il secondo demone è la &lt;strong>pigrizia&lt;/strong>, che in questo contesto assume un valore positivo.&lt;br>
Non parliamo della pigrizia sterile, ma di quella che si trasforma in creatività: la spinta a trovare soluzioni per lavorare di meno ottenendo di più.&lt;/p>
&lt;p>Immaginiamoci in un &lt;strong>minuscolo clan di cacciatori&lt;/strong> qualche decina di migliaia di anni fa.&lt;br>
Nel nostro clan ci sono tre cacciatori:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Urok&lt;/strong> non caccia, non fa nulla e muore di fame.&lt;/li>
&lt;li>&lt;strong>Grag&lt;/strong> affronta i cinghiali a mani nude e prima o poi soccombe.&lt;/li>
&lt;li>&lt;strong>Lem&lt;/strong>, poco amante della caccia, costruisce arco e frecce per ridurre la fatica.&lt;/li>
&lt;/ul>
&lt;p>Chi sopravvive e prospera? Lem, perché trasforma la pigrizia in ingegno.&lt;br>
Lo stesso principio, migliaia di anni dopo, ha portato alla nascita dei computer: qualcuno non voleva più fare calcoli a mano e ha inventato macchine che li facessero al suo posto.&lt;/p>
&lt;h2 id="pigrizia-produttiva-e-superbia-creativa">Pigrizia produttiva e superbia creativa
&lt;/h2>&lt;p>Per uno sviluppatore, la pigrizia non è mai fine a sé stessa. È un modo diverso di guardare al lavoro: invece di pensare &lt;em>“come faccio a portarlo a termine subito?”&lt;/em>, lo sviluppatore si chiede &lt;em>“come faccio a non doverlo mai più ripetere?”&lt;/em>.&lt;/p>
&lt;p>È da qui che nascono strumenti e pratiche che cambiano il modo di scrivere codice:&lt;/p>
&lt;ul>
&lt;li>un &lt;strong>tool&lt;/strong> che automatizza operazioni ripetitive;&lt;/li>
&lt;li>una &lt;strong>libreria&lt;/strong> che potrà essere riutilizzata in decine di progetti;&lt;/li>
&lt;li>un &lt;strong>sistema configurabile&lt;/strong> che si adatta da solo invece di costringere a continue modifiche manuali.&lt;/li>
&lt;/ul>
&lt;p>Tutto questo richiede spesso &lt;strong>più fatica iniziale&lt;/strong> rispetto a fare la stessa operazione un paio di volte a mano. Ma a lungo termine significa risparmiare ore, giorni, persino mesi di lavoro. È la pigrizia che diventa investimento.&lt;/p>
&lt;p>La superbia, a sua volta, non è un vizio sterile: è la convinzione che si possa sempre fare meglio, che valga la pena cercare soluzioni eleganti, potenti, durature. È quella voce che spinge lo sviluppatore a non accontentarsi di “codice che funziona”, ma a costruire qualcosa che possa resistere al tempo, crescere ed essere usato da altri.&lt;/p>
&lt;p>Quando questi due demoni si parlano, accade la magia: la pigrizia spinge a ridurre gli sprechi, la superbia a puntare in alto. Il risultato è software più solido, più utile e – paradossalmente – frutto di meno lavoro ripetitivo.&lt;/p>
&lt;h2 id="due-daemon-sempre-attivi">Due daemon sempre attivi
&lt;/h2>&lt;p>Questi due demoni non si spengono mai. Sono come &lt;em>daemon&lt;/em> in un sistema operativo: girano in background senza farsi notare, consumano energia, ma senza di loro il sistema non avrebbe senso di esistere.&lt;/p>
&lt;p>Lo sviluppatore vive continuamente questa tensione:&lt;/p>
&lt;ul>
&lt;li>la &lt;strong>pigrizia&lt;/strong> che suggerisce “trova un modo per liberarti di questa noiosa ripetizione”;&lt;/li>
&lt;li>la &lt;strong>superbia&lt;/strong> che sussurra “puoi fare qualcosa di più grande, di più elegante, di più potente”.&lt;/li>
&lt;/ul>
&lt;p>Quando l’equilibrio è spezzato, i risultati sono deludenti:&lt;/p>
&lt;ul>
&lt;li>troppa superbia porta a progetti mastodontici e irrealizzabili, pieni di ambizione ma inutilizzabili;&lt;/li>
&lt;li>troppa pigrizia genera scorciatoie e soluzioni fragili, che crollano al primo utilizzo serio.&lt;/li>
&lt;/ul>
&lt;p>Ma quando i due demoni restano in armonia, lo sviluppatore raggiunge il suo stato migliore:&lt;br>
un ozio &lt;strong>produttivo&lt;/strong>, in cui non si cerca di evitare il lavoro, ma di renderlo più intelligente, più umano, persino più divertente.&lt;/p>
&lt;p>È in quell’equilibrio che fiorisce la vera arte dello sviluppo.&lt;/p>
&lt;hr>
&lt;h1 id="the-two-daemons-of-the-developer">The Two Daemons of the Developer
&lt;/h1>&lt;p>Every developer lives with two inner &lt;strong>daemons&lt;/strong>.&lt;br>
And if you catch the pun, you’re probably a developer or at least a bit of a nerd: in operating systems, those invisible background processes that keep everything running are called &lt;em>daemons&lt;/em>.&lt;/p>
&lt;h2 id="the-daemon-of-pride">The Daemon of Pride
&lt;/h2>&lt;p>The first daemon shows up the moment we write our &lt;strong>first working program&lt;/strong>.&lt;br>
A “Hello World”, a shape on the screen, or maybe a tiny script that makes a boring task easier.&lt;br>
That’s when it hits us: &lt;em>“I can give orders to a machine, and it will actually do what I say”&lt;/em>.&lt;br>
It’s a small &lt;strong>rush of power&lt;/strong> that stays with most developers for the rest of their career.&lt;/p>
&lt;p>From then on, the urge to bend reality with code never really goes away. It just keeps running in the background like a daemon you can’t kill.&lt;/p>
&lt;h2 id="the-daemon-of-laziness">The Daemon of Laziness
&lt;/h2>&lt;p>The second daemon is &lt;strong>laziness&lt;/strong>, and here it’s not a bad thing.&lt;br>
We’re not talking about doing nothing, but about finding smarter ways to avoid doing the same thing twice. It’s laziness turned into creativity.&lt;/p>
&lt;p>Picture a &lt;strong>tiny hunter clan&lt;/strong> tens of thousands of years ago.&lt;br>
In our clan, there are three hunters:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Urok&lt;/strong> doesn’t hunt, does nothing, and starves.&lt;/li>
&lt;li>&lt;strong>Grag&lt;/strong> wrestles wild boars with his bare hands and eventually gets killed.&lt;/li>
&lt;li>&lt;strong>Lem&lt;/strong>, not a big fan of hunting, builds a bow and arrows to make life easier.&lt;/li>
&lt;/ul>
&lt;p>Who survives and thrives? Lem, because he turns laziness into ingenuity.&lt;br>
Fast forward a few millennia, and the same principle gave us computers: someone was tired of doing math by hand and built machines to do it instead.&lt;/p>
&lt;h2 id="productive-laziness-and-creative-pride">Productive Laziness and Creative Pride
&lt;/h2>&lt;p>For a developer, laziness is never the goal. It’s more of a mindset: instead of asking &lt;em>“how do I get this done quickly?”&lt;/em>, the real question is &lt;em>“how do I make sure I never have to do this again?”&lt;/em>.&lt;/p>
&lt;p>That’s how tools and best practices are born:&lt;/p>
&lt;ul>
&lt;li>a &lt;strong>script&lt;/strong> that takes care of repetitive work;&lt;/li>
&lt;li>a &lt;strong>library&lt;/strong> you can reuse in project after project;&lt;/li>
&lt;li>a &lt;strong>configurable system&lt;/strong> that adapts itself instead of needing endless tweaks.&lt;/li>
&lt;/ul>
&lt;p>Sure, it usually takes &lt;strong>more effort up front&lt;/strong> than just doing the task a couple of times by hand. But in the long run, it saves hours, days, even months of work. That’s laziness as an investment.&lt;/p>
&lt;p>Pride plays its part too: it’s the belief that things can always be improved, that “good enough” isn’t actually good enough. It’s the little voice that pushes you to make your code cleaner, more elegant, and more useful to others.&lt;/p>
&lt;p>When these two daemons work together, the result is magic: laziness keeps waste in check, pride pushes for quality. The outcome is stronger, more reliable software – and ironically, less repetitive effort.&lt;/p>
&lt;h2 id="two-daemons-always-running">Two Daemons Always Running
&lt;/h2>&lt;p>These two daemons never really stop. They’re like system daemons: always running, using up a bit of energy, but without them nothing would work.&lt;/p>
&lt;p>Every developer feels this tension:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>laziness&lt;/strong> whispering “find a way to stop doing this boring thing over and over”;&lt;/li>
&lt;li>&lt;strong>pride&lt;/strong> saying “you can build something better, bigger, smarter”.&lt;/li>
&lt;/ul>
&lt;p>When the balance tips too far, the results aren’t great:&lt;/p>
&lt;ul>
&lt;li>too much pride leads to over-engineered monsters that no one can use;&lt;/li>
&lt;li>too much laziness creates flimsy shortcuts that fall apart under real use.&lt;/li>
&lt;/ul>
&lt;p>But when the two daemons are in sync, that’s when developers do their best work:&lt;br>
a kind of &lt;strong>productive idleness&lt;/strong>, where the point isn’t to dodge work but to make it smarter, more human, maybe even more fun.&lt;/p>
&lt;p>It is in that balance that the true art of development flourishes.&lt;/p></description></item><item><title>Testare le GitHub Actions in locale con act</title><link>https://procionegobbo.it/blog/testare-github-actions-in-locale-act/</link><pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/testare-github-actions-in-locale-act/</guid><description>&lt;img src="https://procionegobbo.it/blog/testare-github-actions-in-locale-act/act.jpg" alt="Featured image of post Testare le GitHub Actions in locale con act" />&lt;p>Chi usa GitHub prima o poi si scontra con i workflow. Di recente stiamo affrontando una sfida solo all&amp;rsquo;apparenza banale: migrare alcuni dei nostri repo su Github e implementare le actions necessarie alle necessità di CI/CD.&lt;/p>
&lt;p>Di base sarebbe banale, in rete ci sono gazilioni di esempi, template, guide e perfino wizard che, in teoria, ti forniscono gli script già pronti.&lt;/p>
&lt;p>Migrando uno degli ultimi repo però mi è successa una cosa particolare. Stavo usando per il workflow da eseguire sulle pull-request lo stesso script usato con successo in altri repo (sono tutti sistemi basati su Laravel). Questa volta però non andava, errori di connessione al db, test che fallivano in maniera inaspettata.&lt;/p>
&lt;p>Tentavo le correzioni, push su GitHub, interminabile attesa che il workflow girasse per esaminare gli errori.&lt;/p>
&lt;p>Un modo mooolto lento di procedere.&lt;/p>
&lt;h2 id="installare-e-usare-act-per-testare-le-github-actions">Installare e usare act per testare le GitHub Actions
&lt;/h2>&lt;p>Per fortuna c&amp;rsquo;è un&amp;rsquo;alternativa: &lt;a class="link" href="https://nektosact.com/" target="_blank" rel="noopener"
>&lt;strong>act&lt;/strong> - https://nektosact.com/&lt;/a>
questa fantastica utility scritta in Go permette di eseguire le actions di GitHub in locale grazie alla creazione al volo di una serie di container (nel mio caso uso &lt;a class="link" href="https://podman.io/" target="_blank" rel="noopener"
>Podman&lt;/a> invece di Docker).&lt;/p>
&lt;p>L&amp;rsquo;installazione è banale, nel mio caso su Mac&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>brew install act
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dopodiché basta avere il servizio Docker (o Podman) attivo e lanciare l&amp;rsquo;utility.&lt;/p>
&lt;p>Ecco un esempio completo di comando, con tutti i parametri che uso nel mio ambiente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>act &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --workflows &lt;span style="color:#e6db74">&amp;#34;.github/workflows/main.yml&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --secret-file .secrets &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --var-file .vars &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --pull&lt;span style="color:#f92672">=&lt;/span>false &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> --container-architecture linux/arm64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -P ubuntu-latest&lt;span style="color:#f92672">=&lt;/span>catthehacker/ubuntu:act-latest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -P self-hosted&lt;span style="color:#f92672">=&lt;/span>catthehacker/ubuntu:act-latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configurare-act-i-parametri-principali">Configurare act: i parametri principali
&lt;/h2>&lt;p>Vi spiego i vari parametri:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parametro&lt;/th>
&lt;th>Descrizione&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>--workflows&lt;/code>&lt;/td>
&lt;td>Path del file &lt;code>.yml&lt;/code> del workflow da eseguire&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--secret-file&lt;/code>&lt;/td>
&lt;td>Variabili &lt;strong>SECRET&lt;/strong> in formato &lt;code>NOME=valore&lt;/code> (una per riga)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--var-file&lt;/code>&lt;/td>
&lt;td>Variabili &lt;strong>VARIABLE&lt;/strong> in formato &lt;code>NOME=valore&lt;/code> (una per riga)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--pull&lt;/code>&lt;/td>
&lt;td>Se &lt;code>false&lt;/code>, evita di scaricare ogni volta l’immagine del container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--container-architecture&lt;/code>&lt;/td>
&lt;td>Architettura da usare per i container (es. &lt;code>linux/arm64&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>-P&lt;/code>&lt;/td>
&lt;td>Specifica l’immagine da usare per il container che eseguirà il workflow&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Nel mio caso per il container ho scelto &lt;code>catthehacker/ubuntu:act-latest&lt;/code> rispetto a &lt;code>catthehacker/ubuntu:full-latest&lt;/code> perché quest&amp;rsquo;ultima, anche se ha la massima compatibilità integrando praticamente tutti i tool necessari, è enorme (60Gb una volta estratta) e non era necessaria.&lt;/p>
&lt;h2 id="conclusioni-perché-usare-act">Conclusioni: perché usare act
&lt;/h2>&lt;p>Utilizzare &lt;code>act&lt;/code> mi ha permesso di testare molto più velocemente il workflow, individuare i problemi e correggerlo in una frazione del tempo rispetto al classico
&lt;code>edit-&amp;gt;commit-&amp;gt;push-&amp;gt;execute action-&amp;gt;repeat&lt;/code>&lt;/p>
&lt;p>Un&amp;rsquo;ultima cosa. Una volta messo a punto il workflow, girava perfettamente su act, è successo che alcuni test fallissero una volta che il workflow veniva eseguito su GitHub. La spiegazione è tanto banale quanto insidiosa: &lt;code>act&lt;/code>, ma anche un banale &lt;code>php artisan test&lt;/code> useranno il vostro file &lt;code>.env&lt;/code> se presente. Tenetene conto quando scrivete il workflow.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Nota importante ⚠️&lt;/strong>&lt;br>
&lt;code>act&lt;/code> utilizza il file &lt;code>.env&lt;/code> locale per eseguire i test, mentre GitHub Actions potrebbe avere un contesto diverso.&lt;br>
Assicurati di configurare correttamente le variabili d’ambiente nel workflow per evitare comportamenti inattesi.&lt;/p>
&lt;/blockquote>
&lt;h2 id="link-utili">Link utili
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://nektosact.com/" target="_blank" rel="noopener"
>Documentazione ufficiale di act&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
>Documentazione ufficiale GitHub Actions&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go</title><link>https://procionegobbo.it/blog/read-methods-golang/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/read-methods-golang/</guid><description>&lt;img src="https://procionegobbo.it/blog/read-methods-golang/bufioreader.jpeg" alt="Featured image of post Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go" />&lt;h1 id="-confronto-metodi-di-bufioreader-in-go">📚 Confronto metodi di &lt;code>bufio.Reader&lt;/code> in Go
&lt;/h1>&lt;h2 id="introduzione">Introduzione
&lt;/h2>&lt;p>Recentemente sto studiando &lt;a class="link" href="https://go.dev/" target="_blank" rel="noopener"
>Go&lt;/a>, linguaggio interessante e per me è un ritorno (ho iniziato a programmare col C) ad un tipo di programmazione profondamente diversa da quella che ho praticato negli ultimi anni specializzandomi su PHP/Laravel.
Una delle cose che mi interessano è come leggere e scrivere da uno stream quindi, con l&amp;rsquo;aiuto di una IA mi sono fatto un veloce riepilogo delle differenze tra alcuni metodi della libreria &lt;code>bufio&lt;/code>.&lt;/p>
&lt;p>I metodi &lt;strong>&lt;code>ReadRune&lt;/code>&lt;/strong>, &lt;strong>&lt;code>ReadBytes&lt;/code>&lt;/strong>, &lt;strong>&lt;code>ReadString&lt;/code>&lt;/strong> e &lt;strong>&lt;code>ReadLine&lt;/code>&lt;/strong> sono molto simili ma solo in apparenza.
Ecco una guida rapida per capire le differenze.&lt;/p>
&lt;hr>
&lt;h2 id="tabella-comparativa">Tabella comparativa
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Metodo&lt;/th>
&lt;th>Firma&lt;/th>
&lt;th>Cosa legge&lt;/th>
&lt;th>Tipo restituito&lt;/th>
&lt;th>Include &lt;code>\n&lt;/code>?&lt;/th>
&lt;th>Note pratiche&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>ReadRune()&lt;/strong>&lt;/td>
&lt;td>&lt;code>(r rune, size int, err error)&lt;/code>&lt;/td>
&lt;td>&lt;strong>Un singolo carattere Unicode&lt;/strong> (1 rune)&lt;/td>
&lt;td>&lt;code>rune&lt;/code> (+size+err)&lt;/td>
&lt;td>N/A (legge solo 1 carattere)&lt;/td>
&lt;td>Utile per analizzare caratteri uno alla volta (UTF-8 safe).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReadBytes(delim byte)&lt;/strong>&lt;/td>
&lt;td>&lt;code>([]byte, error)&lt;/code>&lt;/td>
&lt;td>Fino a &lt;code>delim&lt;/code> incluso&lt;/td>
&lt;td>&lt;code>[]byte&lt;/code>&lt;/td>
&lt;td>✅ sì&lt;/td>
&lt;td>Restituisce slice di byte, ottimo per parsing binario o testo grezzo.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReadString(delim byte)&lt;/strong>&lt;/td>
&lt;td>&lt;code>(string, error)&lt;/code>&lt;/td>
&lt;td>Fino a &lt;code>delim&lt;/code> incluso&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>✅ sì&lt;/td>
&lt;td>Comodo se sai di leggere testo, meno efficiente di &lt;code>ReadBytes&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReadLine()&lt;/strong>&lt;/td>
&lt;td>&lt;code>([]byte, isPrefix bool, error)&lt;/code>&lt;/td>
&lt;td>Una riga (senza &lt;code>\n&lt;/code>)&lt;/td>
&lt;td>&lt;code>[]byte&lt;/code> + &lt;code>isPrefix&lt;/code> + &lt;code>err&lt;/code>&lt;/td>
&lt;td>❌ no&lt;/td>
&lt;td>Se la riga è troppo lunga, la restituisce a pezzi (&lt;code>isPrefix = true&lt;/code>). Serve loop per ricomporla. Più basso livello.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-diagramma-di-flusso-decisionale">🔀 Diagramma di flusso decisionale
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> ┌──────────────────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Vuoi leggere 1 carattere? │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────┬──────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────▼─────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Usa ReadRune() │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────────────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Vuoi leggere fino a un │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ delimitatore (es. &amp;#39;\n&amp;#39;)? │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────┬──────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────────────┼─────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────▼──────────┐ | ┌──────────▼───────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Ti serve un []byte? │ | │ Ti serve una stringa?│
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └──────────┬──────────┘ | └───────────┬──────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────▼──────────┐ | ┌───────────▼───────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Usa ReadBytes() │ | │ Usa ReadString() │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─────────────────────┘ | └───────────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────────────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Devi gestire linee molto │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ lunghe (buffer a pezzi)? │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────┬──────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────▼─────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Usa ReadLine() │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="esempio-pratico">Esempio pratico
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bytes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;café\nseconda linea\nterza linea senza newline finale&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadRune(): legge un singolo carattere Unicode alla volta ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadRune() ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">4&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> { &lt;span style="color:#75715e">// leggo le prime 4 rune: c, a, f, é
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">ru&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadRune&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Errore ReadRune:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;rune=%q size=%d\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ru&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadBytes(&amp;#39;\n&amp;#39;): legge fino al delimitatore incluso e restituisce []byte ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadBytes(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadBytes&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Errore ReadBytes:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ReadBytes: %q (len=%d)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>, len(&lt;span style="color:#a6e22e">b&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadString(&amp;#39;\n&amp;#39;): stesso comportamento ma restituisce string ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadString(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Errore ReadString:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ReadString: %q (len=%d)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>, len(&lt;span style="color:#a6e22e">s&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadLine(): NON include &amp;#39;\n&amp;#39; e può restituire porzioni (isPrefix=true) ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Forziamo una linea più lunga del buffer per vedere isPrefix=true.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadLine() con buffer piccolo e isPrefix ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">longLine&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;abcdefghij\n&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 10 caratteri + &amp;#39;\n&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">smallBuf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReaderSize&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">longLine&lt;/span>), &lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">parts&lt;/span> [][]&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">smallBuf&lt;/span>.&lt;span style="color:#a6e22e">ReadLine&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// fine input o errore
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Copia difensiva del frammento letto
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">parts&lt;/span> = append(&lt;span style="color:#a6e22e">parts&lt;/span>, append([]byte(&lt;span style="color:#66d9ef">nil&lt;/span>), &lt;span style="color:#a6e22e">line&lt;/span>&lt;span style="color:#f92672">...&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;chunk=%q isPrefix=%v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">isPrefix&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">recombined&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">parts&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Ricomposta: %q (pezzi=%d)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">recombined&lt;/span>, len(&lt;span style="color:#a6e22e">parts&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- Esempio classico di ReadLine su testo normale (senza superare il buffer) ---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadLine() normale ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadLine&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;line=%q isPrefix=%v (niente &amp;#39;\\n&amp;#39;)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusioni">Conclusioni
&lt;/h2>&lt;h3 id="in-sintesi-veloce">In sintesi veloce:
&lt;/h3>&lt;ul>
&lt;li>&lt;code>ReadRune&lt;/code> → analisi carattere-per-carattere, sicuro su UTF-8.&lt;/li>
&lt;li>&lt;code>ReadBytes&lt;/code> → legge fino al delimitatore e restituisce &lt;code>[]byte&lt;/code> (ottimo per parsing binario/grezzo).&lt;/li>
&lt;li>&lt;code>ReadString&lt;/code> → come sopra ma restituisce string (più comodo, più allocazioni).&lt;/li>
&lt;li>&lt;code>ReadLine&lt;/code> → non include &lt;code>\n&lt;/code>, gestisce linee molto lunghe a pezzi con &lt;code>isPrefix&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="insidie-comuni-da-ricordare">Insidie comuni da ricordare:
&lt;/h3>&lt;ul>
&lt;li>Fine riga su Windows è &lt;code>\r\n&lt;/code>: rimuovi il &lt;code>\r&lt;/code> finale se leggi fino a &lt;code>\n&lt;/code>.&lt;/li>
&lt;li>&lt;code>bufio.Scanner&lt;/code> ha un limite di token (≈64 KB) che va aumentato per righe grandi.&lt;/li>
&lt;li>Le allocazioni: &lt;code>ReadString&lt;/code> crea sempre una nuova stringa; con &lt;code>ReadBytes&lt;/code> puoi restare su &lt;code>[]byte&lt;/code> finché serve.&lt;/li>
&lt;/ul>
&lt;h3 id="cosa-usare-quando">Cosa usare quando:
&lt;/h3>&lt;ul>
&lt;li>Parsing binario o attenzione alle allocazioni → &lt;code>ReadBytes&lt;/code>.&lt;/li>
&lt;li>Input testuale “line-oriented” → &lt;code>ReadString&lt;/code> (oppure Scanner).&lt;/li>
&lt;li>Analisi fine di rune (accenti/emoji) → &lt;code>ReadRune&lt;/code>.&lt;/li>
&lt;li>Log/file con righe enormi → &lt;code>ReadLine&lt;/code> (ricomponi quando &lt;code>isPrefix&lt;/code> == true).&lt;/li>
&lt;/ul></description></item></channel></rss>