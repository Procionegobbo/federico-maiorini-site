<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Federico Maiorini</title><link>https://procionegobbo.it/blog/</link><description>Recent content in Blogs on Federico Maiorini</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Sun, 28 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://procionegobbo.it/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Come To Code 2025: il piacere di una conferenza diversa</title><link>https://procionegobbo.it/blog/come-to-code-2025/</link><pubDate>Sun, 28 Sep 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/come-to-code-2025/</guid><description>&lt;img src="https://procionegobbo.it/blog/come-to-code-2025/come-to-code-2025.jpg" alt="Featured image of post Come To Code 2025: il piacere di una conferenza diversa" /&gt;&lt;p&gt;Quest&amp;rsquo;ultimo fine settimana sono stato al Come To Code a Pignola. √à la quinta edizione di questa conferenza per (non solo) sviluppatori. Mi dichiaro colpevole vostro onore: non la conoscevo e avrei voluto conoscerla prima. Sono stati due giorni intensi, pieni di talk interessanti, ottimo cibo, musica e nuove conoscenze.
Il Come To Code non √® una conferenza verticale mirata ad una specifica tecnologia e metodologia, abbraccia tutto quello di cui si pu√≤ parlare del nostro lavoro davvero a 360 gradi, talmente tanti talk in due giorni che √® stato necessario dividerli in tre track tematici.
Alcuni mi interessavano molto a livello tecnico o stimolavano la mia curiosit√† &lt;em&gt;nerdosa&lt;/em&gt; ma ho deciso, almeno il primo giorno di seguire una strada alternativa: i talk della track 3 sul personal branding e human skills. √à un argomento che ho trascurato per anni, sbagliando, ma che dovrebbe far parte del bagaglio di competenze di ogni sviluppatore. √à anche una delle cose pi√π difficili da fare, almeno per me. Parlare di s√©, parlare dei propri interessi in modo che possa interessare, coinvolgere non sono cose che mi vengano spontanee, non sempre. Sembra, anche nella mia testa, un controsenso: mi piace stare tra la gente ma non mi piace la folla, mi piace discutere (anche animatamente) ma mi stressano i conflitti, mi piace essere notato ma mettermi in mostra mi d√† disagio. Un casino insomma.
La track 3 √® stata, non dico illuminante ma molto interessante.
Questi sono i talk che mi hanno interessato di pi√π.&lt;/p&gt;
&lt;p&gt;Il talk &lt;strong&gt;Impatto Digitale: Riflessioni sull&amp;rsquo;Utilizzo Responsabile delle Innovazioni Tecnologiche&lt;/strong&gt; di Valeria Salis era incentrato sull&amp;rsquo;impatto che il nostro lavoro genera sull&amp;rsquo;ambiente. Un argomento quasi sempre ignorato ma sul quale dovremmo riflettere tutti di pi√π: tutto quello che facciamo, mandare una mail, fare una ricerca su Google, chiedere a ChatGPT la ricetta degli &lt;em&gt;strangozzi alla spaccaprete&lt;/em&gt; (me li sono inventati √® inutile cercare) consuma energia e quindi produce emissioni di CO2. Per quanto queste emissioni possano essere piccole siamo otto miliardi di persone su questo pianeta, otto miliardi o buona parte di essi che leggono e scrivono mail, cercano sul web, interrogano IA, guardano video in streaming. Tutto si somma.
√à una cosa su cui anche gli sviluppatori dovrebbero riflettere &amp;ldquo;Come posso, nel mio piccolo fare o evitare di fare qualcosa e evitare quei grammi di CO2?&amp;rdquo; Ognuno di noi pu√≤ dare solo un infinitesimale contributo, ma come dicevo prima, tutto si somma.
Nel caso vi venisse voglia di fare una facile battuta vi dico subito s√¨, colgo l&amp;rsquo;ironia del fatto che sto scrivendo questo su un computer e che lo pubblicher√≤ su internet.&lt;/p&gt;
&lt;p&gt;Il secondo talk &lt;strong&gt;Goal setting: a practical approach to grow&lt;/strong&gt; di Michela Bertaina era un&amp;rsquo;interessante esperienza personale. Bertaina ha raccontato, in dettaglio, la sua storia di crescita personale. Come si √® nel tempo costruita un vero e proprio framework col quale ha praticamente riprogrammato la sua vita, le sue abitudini, in effetti il suo cervello per allinearli ad un set di obiettivi che si era prefissata. Con tanto di retrospettive, bug hunting, milestone e KPI.
Affascinante come un esperienza totalmente non tecnica possa avvicinarsi a quello che, come sviluppatore, faccio praticamente ogni giorno. Non so se nel mio caso saprei o vorrei applicare una metodologia del genere ma ne ho colto e apprezzato il senso e le potenzialit√†.&lt;/p&gt;
&lt;p&gt;Il talk &lt;strong&gt;Developer che odiano il personal branding&lt;/strong&gt; di Lara Lombardi invece era esplosivo ed esuberante come lei e toccava un tasto estremamente delicato e che sento particolarmente difficile da affrontare: personal branding. La questione principale √® che molti sviluppatori, me compreso, hanno la convinzione inconscia che i loro meriti e le loro capacit√† saranno riconosciuti a prescindere, saranno evidenti per gli altri dal nostro lavoro e anche tra i non tecnici
Col cazzo! Scusate il francesismo&amp;hellip;mi sono lasciato trascinare.
Soprattutto per un non tecnico capire e apprezzare le capacit√† di uno sviluppatore non sar√† mai possibile se lo sviluppatore stesso non si preoccupa di tradurle in un discorso comprensibile all&amp;rsquo;esterno della sua nicchia. Uso &lt;em&gt;discorso&lt;/em&gt; nel senso del termine pi√π ampio possibile: tutto ci√≤ che pu√≤ servire a comunicare informazioni su quello che sei, quello che fai e quello che potresti fare. Insomma √® qualcosa che va fatto, sia come apertura verso il resto del mondo che come crescita personale e professionale.&lt;/p&gt;
&lt;p&gt;Ultimo di cui voglio parlare sarebbe stato un workshop ma Guido Penta e Simone Torrisi forse sono un po&amp;rsquo; logorroici üòâ e il workshop si √® miracolosamente trasformato in un talk/dibattito.
&lt;strong&gt;Guida galattica al personal branding, alla carriera e a tutto quanto (from 0 to 42)&lt;/strong&gt; √® stata una illuminante guida attraverso l&amp;rsquo;arte di ottimizzare un curriculum, creare il proprio personal branding, non farsi travolgere durante i colloqui. Indipendentemente che voi stiate attivamente cercando un lavoro, che siate junior, middle o senior avere un curriculum aggiornato e fatto bene, sapere come affrontare un processo di recruiting √® qualcosa sulla quale dovreste sempre essere preparati. Primo perch√©, dico per esperienza personale, per quanto tu possa essere tranquillo/a davanti al tuo monitor tutto pu√≤ succedere. Secondo perch√©, soprattutto in aziende pi√π grandi, anche internamente ci potrebbero essere dei processi analoghi al recruiting per cambi di team, cambi tecnologici, opportunit√† di carriera.
Bisogna saper parlare di soldi in maniera schietta, essere parte attiva in tutto il processo, parlare delle proprie aspirazioni oltre che delle competenze e non subire quello che accade.
E, per chi cerca attivamente, capire a chi mandare i curricula: la pesca a strascico non funziona.
Forse √® stato meglio che il workshop si sia mutato in talk, credo che abbia permesso di approfondire gli argomenti molto meglio, l&amp;rsquo;alternativa sarebbe stata &lt;em&gt;vi spiego come fare un curriculum fatto bene&lt;/em&gt; ma secondo me sarebbe stato molto riduttivo rispetto all&amp;rsquo;esperienza e alle competenze di Penta e Torrisi.&lt;/p&gt;
&lt;p&gt;A coronamento della conferenza c&amp;rsquo;√® stata l&amp;rsquo;eccezionale ospitalit√†. Il cibo ottimo, la musica, l&amp;rsquo;atmosfera assolutamente amichevole tutto fantastico.
La differenza rispetto ad altre conferenze a cui ho partecipato, che mi hanno dato interesse e curiosit√†, √® che al Come To Code ho trovato anche il raro piacere di stare tra la gente.&lt;/p&gt;
&lt;h2 id="riferimenti"&gt;Riferimenti
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://www.cometocode.it/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Come To Code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="speaker-citati"&gt;Speaker citati
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://www.linkedin.com/in/valeria-salis/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Valeria Salis&lt;/strong&gt; - LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.linkedin.com/in/michelabertaina/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Michela Bertaina&lt;/strong&gt; - LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://it.LinkedIn.com/in/laralombardi" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Lara Lombardi&lt;/strong&gt; - LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.linkedin.com/in/guido-penta/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Guido Penta&lt;/strong&gt; - LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.linkedin.com/in/storrisi/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Simone Torrisi&lt;/strong&gt; - LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Developer's daemons</title><link>https://procionegobbo.it/blog/developers-daemons/</link><pubDate>Thu, 04 Sep 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/developers-daemons/</guid><description>&lt;img src="https://procionegobbo.it/blog/developers-daemons/developer-daemons.jpeg" alt="Featured image of post Developer's daemons" /&gt;&lt;p&gt;&lt;em&gt;(The English version of this article is provided after the Italian one. / La versione inglese di questo articolo si trova dopo quella in italiano)&lt;/em&gt;&lt;/p&gt;
&lt;h1 id="i-due-demoni-dello-sviluppatore"&gt;I due demoni dello sviluppatore
&lt;/h1&gt;&lt;p&gt;Ogni sviluppatore convive con due &lt;strong&gt;demoni interiori&lt;/strong&gt;.&lt;br&gt;
E se cogliete il gioco di parole, siete probabilmente sviluppatori o almeno un po‚Äô nerd: nei sistemi operativi i processi che lavorano silenziosi in background, invisibili ma indispensabili, si chiamano infatti &lt;em&gt;daemon&lt;/em&gt; (o &lt;em&gt;demoni&lt;/em&gt; in italiano).&lt;/p&gt;
&lt;h2 id="il-demone-della-superbia"&gt;Il demone della superbia
&lt;/h2&gt;&lt;p&gt;Il primo demone nasce nel momento in cui scriviamo il nostro &lt;strong&gt;primo programma funzionante&lt;/strong&gt;.&lt;br&gt;
Un ‚ÄúHello World‚Äù, un disegno a schermo, un piccolo script che semplifica un compito noioso.&lt;br&gt;
In quell‚Äôistante compare una sensazione potente: &lt;em&gt;‚ÄúPosso dare ordini a una macchina, e lei li eseguir√†‚Äù&lt;/em&gt;. √à un piccolo &lt;strong&gt;delirio di onnipotenza&lt;/strong&gt; che accompagna quasi tutti gli sviluppatori per il resto della carriera.&lt;/p&gt;
&lt;p&gt;Da quel momento in poi, la tentazione di piegare la realt√† al proprio codice rimane sempre attiva, come un processo in background difficile da spegnere.&lt;/p&gt;
&lt;h2 id="il-demone-della-pigrizia"&gt;Il demone della pigrizia
&lt;/h2&gt;&lt;p&gt;Il secondo demone √® la &lt;strong&gt;pigrizia&lt;/strong&gt;, che in questo contesto assume un valore positivo.&lt;br&gt;
Non parliamo della pigrizia sterile, ma di quella che si trasforma in creativit√†: la spinta a trovare soluzioni per lavorare di meno ottenendo di pi√π.&lt;/p&gt;
&lt;p&gt;Immaginiamoci in un &lt;strong&gt;minuscolo clan di cacciatori&lt;/strong&gt; qualche decina di migliaia di anni fa.&lt;br&gt;
Nel nostro clan ci sono tre cacciatori:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Urok&lt;/strong&gt; non caccia, non fa nulla e muore di fame.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grag&lt;/strong&gt; affronta i cinghiali a mani nude e prima o poi soccombe.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lem&lt;/strong&gt;, poco amante della caccia, costruisce arco e frecce per ridurre la fatica.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chi sopravvive e prospera? Lem, perch√© trasforma la pigrizia in ingegno.&lt;br&gt;
Lo stesso principio, migliaia di anni dopo, ha portato alla nascita dei computer: qualcuno non voleva pi√π fare calcoli a mano e ha inventato macchine che li facessero al suo posto.&lt;/p&gt;
&lt;h2 id="pigrizia-produttiva-e-superbia-creativa"&gt;Pigrizia produttiva e superbia creativa
&lt;/h2&gt;&lt;p&gt;Per uno sviluppatore, la pigrizia non √® mai fine a s√© stessa. √à un modo diverso di guardare al lavoro: invece di pensare &lt;em&gt;‚Äúcome faccio a portarlo a termine subito?‚Äù&lt;/em&gt;, lo sviluppatore si chiede &lt;em&gt;‚Äúcome faccio a non doverlo mai pi√π ripetere?‚Äù&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;√à da qui che nascono strumenti e pratiche che cambiano il modo di scrivere codice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un &lt;strong&gt;tool&lt;/strong&gt; che automatizza operazioni ripetitive;&lt;/li&gt;
&lt;li&gt;una &lt;strong&gt;libreria&lt;/strong&gt; che potr√† essere riutilizzata in decine di progetti;&lt;/li&gt;
&lt;li&gt;un &lt;strong&gt;sistema configurabile&lt;/strong&gt; che si adatta da solo invece di costringere a continue modifiche manuali.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tutto questo richiede spesso &lt;strong&gt;pi√π fatica iniziale&lt;/strong&gt; rispetto a fare la stessa operazione un paio di volte a mano. Ma a lungo termine significa risparmiare ore, giorni, persino mesi di lavoro. √à la pigrizia che diventa investimento.&lt;/p&gt;
&lt;p&gt;La superbia, a sua volta, non √® un vizio sterile: √® la convinzione che si possa sempre fare meglio, che valga la pena cercare soluzioni eleganti, potenti, durature. √à quella voce che spinge lo sviluppatore a non accontentarsi di ‚Äúcodice che funziona‚Äù, ma a costruire qualcosa che possa resistere al tempo, crescere ed essere usato da altri.&lt;/p&gt;
&lt;p&gt;Quando questi due demoni si parlano, accade la magia: la pigrizia spinge a ridurre gli sprechi, la superbia a puntare in alto. Il risultato √® software pi√π solido, pi√π utile e ‚Äì paradossalmente ‚Äì frutto di meno lavoro ripetitivo.&lt;/p&gt;
&lt;h2 id="due-daemon-sempre-attivi"&gt;Due daemon sempre attivi
&lt;/h2&gt;&lt;p&gt;Questi due demoni non si spengono mai. Sono come &lt;em&gt;daemon&lt;/em&gt; in un sistema operativo: girano in background senza farsi notare, consumano energia, ma senza di loro il sistema non avrebbe senso di esistere.&lt;/p&gt;
&lt;p&gt;Lo sviluppatore vive continuamente questa tensione:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la &lt;strong&gt;pigrizia&lt;/strong&gt; che suggerisce ‚Äútrova un modo per liberarti di questa noiosa ripetizione‚Äù;&lt;/li&gt;
&lt;li&gt;la &lt;strong&gt;superbia&lt;/strong&gt; che sussurra ‚Äúpuoi fare qualcosa di pi√π grande, di pi√π elegante, di pi√π potente‚Äù.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quando l‚Äôequilibrio √® spezzato, i risultati sono deludenti:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;troppa superbia porta a progetti mastodontici e irrealizzabili, pieni di ambizione ma inutilizzabili;&lt;/li&gt;
&lt;li&gt;troppa pigrizia genera scorciatoie e soluzioni fragili, che crollano al primo utilizzo serio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ma quando i due demoni restano in armonia, lo sviluppatore raggiunge il suo stato migliore:&lt;br&gt;
un ozio &lt;strong&gt;produttivo&lt;/strong&gt;, in cui non si cerca di evitare il lavoro, ma di renderlo pi√π intelligente, pi√π umano, persino pi√π divertente.&lt;/p&gt;
&lt;p&gt;√à in quell‚Äôequilibrio che fiorisce la vera arte dello sviluppo.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="the-two-daemons-of-the-developer"&gt;The Two Daemons of the Developer
&lt;/h1&gt;&lt;p&gt;Every developer lives with two inner &lt;strong&gt;daemons&lt;/strong&gt;.&lt;br&gt;
And if you catch the pun, you‚Äôre probably a developer or at least a bit of a nerd: in operating systems, those invisible background processes that keep everything running are called &lt;em&gt;daemons&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="the-daemon-of-pride"&gt;The Daemon of Pride
&lt;/h2&gt;&lt;p&gt;The first daemon shows up the moment we write our &lt;strong&gt;first working program&lt;/strong&gt;.&lt;br&gt;
A ‚ÄúHello World‚Äù, a shape on the screen, or maybe a tiny script that makes a boring task easier.&lt;br&gt;
That‚Äôs when it hits us: &lt;em&gt;‚ÄúI can give orders to a machine, and it will actually do what I say‚Äù&lt;/em&gt;.&lt;br&gt;
It‚Äôs a small &lt;strong&gt;rush of power&lt;/strong&gt; that stays with most developers for the rest of their career.&lt;/p&gt;
&lt;p&gt;From then on, the urge to bend reality with code never really goes away. It just keeps running in the background like a daemon you can‚Äôt kill.&lt;/p&gt;
&lt;h2 id="the-daemon-of-laziness"&gt;The Daemon of Laziness
&lt;/h2&gt;&lt;p&gt;The second daemon is &lt;strong&gt;laziness&lt;/strong&gt;, and here it‚Äôs not a bad thing.&lt;br&gt;
We‚Äôre not talking about doing nothing, but about finding smarter ways to avoid doing the same thing twice. It‚Äôs laziness turned into creativity.&lt;/p&gt;
&lt;p&gt;Picture a &lt;strong&gt;tiny hunter clan&lt;/strong&gt; tens of thousands of years ago.&lt;br&gt;
In our clan, there are three hunters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Urok&lt;/strong&gt; doesn‚Äôt hunt, does nothing, and starves.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grag&lt;/strong&gt; wrestles wild boars with his bare hands and eventually gets killed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lem&lt;/strong&gt;, not a big fan of hunting, builds a bow and arrows to make life easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Who survives and thrives? Lem, because he turns laziness into ingenuity.&lt;br&gt;
Fast forward a few millennia, and the same principle gave us computers: someone was tired of doing math by hand and built machines to do it instead.&lt;/p&gt;
&lt;h2 id="productive-laziness-and-creative-pride"&gt;Productive Laziness and Creative Pride
&lt;/h2&gt;&lt;p&gt;For a developer, laziness is never the goal. It‚Äôs more of a mindset: instead of asking &lt;em&gt;‚Äúhow do I get this done quickly?‚Äù&lt;/em&gt;, the real question is &lt;em&gt;‚Äúhow do I make sure I never have to do this again?‚Äù&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That‚Äôs how tools and best practices are born:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;script&lt;/strong&gt; that takes care of repetitive work;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;library&lt;/strong&gt; you can reuse in project after project;&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;configurable system&lt;/strong&gt; that adapts itself instead of needing endless tweaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, it usually takes &lt;strong&gt;more effort up front&lt;/strong&gt; than just doing the task a couple of times by hand. But in the long run, it saves hours, days, even months of work. That‚Äôs laziness as an investment.&lt;/p&gt;
&lt;p&gt;Pride plays its part too: it‚Äôs the belief that things can always be improved, that ‚Äúgood enough‚Äù isn‚Äôt actually good enough. It‚Äôs the little voice that pushes you to make your code cleaner, more elegant, and more useful to others.&lt;/p&gt;
&lt;p&gt;When these two daemons work together, the result is magic: laziness keeps waste in check, pride pushes for quality. The outcome is stronger, more reliable software ‚Äì and ironically, less repetitive effort.&lt;/p&gt;
&lt;h2 id="two-daemons-always-running"&gt;Two Daemons Always Running
&lt;/h2&gt;&lt;p&gt;These two daemons never really stop. They‚Äôre like system daemons: always running, using up a bit of energy, but without them nothing would work.&lt;/p&gt;
&lt;p&gt;Every developer feels this tension:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;laziness&lt;/strong&gt; whispering ‚Äúfind a way to stop doing this boring thing over and over‚Äù;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pride&lt;/strong&gt; saying ‚Äúyou can build something better, bigger, smarter‚Äù.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the balance tips too far, the results aren‚Äôt great:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;too much pride leads to over-engineered monsters that no one can use;&lt;/li&gt;
&lt;li&gt;too much laziness creates flimsy shortcuts that fall apart under real use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But when the two daemons are in sync, that‚Äôs when developers do their best work:&lt;br&gt;
a kind of &lt;strong&gt;productive idleness&lt;/strong&gt;, where the point isn‚Äôt to dodge work but to make it smarter, more human, maybe even more fun.&lt;/p&gt;
&lt;p&gt;It is in that balance that the true art of development flourishes.&lt;/p&gt;</description></item><item><title>Testare le GitHub Actions in locale con act</title><link>https://procionegobbo.it/blog/testare-github-actions-in-locale-act/</link><pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/testare-github-actions-in-locale-act/</guid><description>&lt;img src="https://procionegobbo.it/blog/testare-github-actions-in-locale-act/act.jpg" alt="Featured image of post Testare le GitHub Actions in locale con act" /&gt;&lt;p&gt;Chi usa GitHub prima o poi si scontra con i workflow. Di recente stiamo affrontando una sfida solo all&amp;rsquo;apparenza banale: migrare alcuni dei nostri repo su Github e implementare le actions necessarie alle necessit√† di CI/CD.&lt;/p&gt;
&lt;p&gt;Di base sarebbe banale, in rete ci sono gazilioni di esempi, template, guide e perfino wizard che, in teoria, ti forniscono gli script gi√† pronti.&lt;/p&gt;
&lt;p&gt;Migrando uno degli ultimi repo per√≤ mi √® successa una cosa particolare. Stavo usando per il workflow da eseguire sulle pull-request lo stesso script usato con successo in altri repo (sono tutti sistemi basati su Laravel). Questa volta per√≤ non andava, errori di connessione al db, test che fallivano in maniera inaspettata.&lt;/p&gt;
&lt;p&gt;Tentavo le correzioni, push su GitHub, interminabile attesa che il workflow girasse per esaminare gli errori.&lt;/p&gt;
&lt;p&gt;Un modo mooolto lento di procedere.&lt;/p&gt;
&lt;h2 id="installare-e-usare-act-per-testare-le-github-actions"&gt;Installare e usare act per testare le GitHub Actions
&lt;/h2&gt;&lt;p&gt;Per fortuna c&amp;rsquo;√® un&amp;rsquo;alternativa: &lt;a class="link" href="https://nektosact.com/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;act&lt;/strong&gt; - https://nektosact.com/&lt;/a&gt;
questa fantastica utility scritta in Go permette di eseguire le actions di GitHub in locale grazie alla creazione al volo di una serie di container (nel mio caso uso &lt;a class="link" href="https://podman.io/" target="_blank" rel="noopener"
&gt;Podman&lt;/a&gt; invece di Docker).&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;installazione √® banale, nel mio caso su Mac&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install act
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dopodich√© basta avere il servizio Docker (o Podman) attivo e lanciare l&amp;rsquo;utility.&lt;/p&gt;
&lt;p&gt;Ecco un esempio completo di comando, con tutti i parametri che uso nel mio ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;act &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --workflows &lt;span style="color:#e6db74"&gt;&amp;#34;.github/workflows/main.yml&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --secret-file .secrets &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --var-file .vars &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --pull&lt;span style="color:#f92672"&gt;=&lt;/span&gt;false &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --container-architecture linux/arm64 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -P ubuntu-latest&lt;span style="color:#f92672"&gt;=&lt;/span&gt;catthehacker/ubuntu:act-latest &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -P self-hosted&lt;span style="color:#f92672"&gt;=&lt;/span&gt;catthehacker/ubuntu:act-latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configurare-act-i-parametri-principali"&gt;Configurare act: i parametri principali
&lt;/h2&gt;&lt;p&gt;Vi spiego i vari parametri:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parametro&lt;/th&gt;
&lt;th&gt;Descrizione&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--workflows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path del file &lt;code&gt;.yml&lt;/code&gt; del workflow da eseguire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--secret-file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Variabili &lt;strong&gt;SECRET&lt;/strong&gt; in formato &lt;code&gt;NOME=valore&lt;/code&gt; (una per riga)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--var-file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Variabili &lt;strong&gt;VARIABLE&lt;/strong&gt; in formato &lt;code&gt;NOME=valore&lt;/code&gt; (una per riga)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Se &lt;code&gt;false&lt;/code&gt;, evita di scaricare ogni volta l‚Äôimmagine del container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--container-architecture&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Architettura da usare per i container (es. &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifica l‚Äôimmagine da usare per il container che eseguir√† il workflow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Nel mio caso per il container ho scelto &lt;code&gt;catthehacker/ubuntu:act-latest&lt;/code&gt; rispetto a &lt;code&gt;catthehacker/ubuntu:full-latest&lt;/code&gt; perch√© quest&amp;rsquo;ultima, anche se ha la massima compatibilit√† integrando praticamente tutti i tool necessari, √® enorme (60Gb una volta estratta) e non era necessaria.&lt;/p&gt;
&lt;h2 id="conclusioni-perch√©-usare-act"&gt;Conclusioni: perch√© usare act
&lt;/h2&gt;&lt;p&gt;Utilizzare &lt;code&gt;act&lt;/code&gt; mi ha permesso di testare molto pi√π velocemente il workflow, individuare i problemi e correggerlo in una frazione del tempo rispetto al classico
&lt;code&gt;edit-&amp;gt;commit-&amp;gt;push-&amp;gt;execute action-&amp;gt;repeat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Un&amp;rsquo;ultima cosa. Una volta messo a punto il workflow, girava perfettamente su act, √® successo che alcuni test fallissero una volta che il workflow veniva eseguito su GitHub. La spiegazione √® tanto banale quanto insidiosa: &lt;code&gt;act&lt;/code&gt;, ma anche un banale &lt;code&gt;php artisan test&lt;/code&gt; useranno il vostro file &lt;code&gt;.env&lt;/code&gt; se presente. Tenetene conto quando scrivete il workflow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota importante ‚ö†Ô∏è&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;act&lt;/code&gt; utilizza il file &lt;code&gt;.env&lt;/code&gt; locale per eseguire i test, mentre GitHub Actions potrebbe avere un contesto diverso.&lt;br&gt;
Assicurati di configurare correttamente le variabili d‚Äôambiente nel workflow per evitare comportamenti inattesi.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="link-utili"&gt;Link utili
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://nektosact.com/" target="_blank" rel="noopener"
&gt;Documentazione ufficiale di act&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
&gt;Documentazione ufficiale GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Come nasce un rapper fatto di gas: dietro le quinte di Tony Loffa</title><link>https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/</guid><description>&lt;img src="https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/cover.jpeg" alt="Featured image of post Come nasce un rapper fatto di gas: dietro le quinte di Tony Loffa" /&gt;&lt;h2 id="lidea-iniziale"&gt;L‚Äôidea iniziale
&lt;/h2&gt;&lt;p&gt;Tutto √® nato per caso, durante una serata in cui avremmo dovuto uscire tra amici. Uno di loro, per tirarsi fuori con una battuta, se ne usc√¨ con:&lt;br&gt;
&lt;strong&gt;&amp;ldquo;Non posso, devo andare al concerto di Tony Loffa.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quel nome ‚Äî &lt;em&gt;Tony Loffa&lt;/em&gt; ‚Äî mi ha fulminato.&lt;br&gt;
Non so spiegare bene cosa sia scattato, ma nel giro di pochi minuti il mio cervello aveva gi√† dato forma al personaggio: un rapper assurdo, grottesco, con un‚Äôidentit√† fortissima. Una parodia vivente, eppure dotata di coerenza interna, di un mondo suo.&lt;/p&gt;
&lt;p&gt;Tony Loffa &lt;strong&gt;non √® ispirato a nessuno di reale&lt;/strong&gt;, non √® la caricatura di una persona esistente. √à piuttosto una &lt;strong&gt;satira dell‚Äôintera scena trap&lt;/strong&gt;, dei suoi eccessi, dei suoi clich√©. Ma non √® nemmeno una critica amara o moralista: √® solo satira, fatta con ironia e creativit√†, come un esperimento di intelligenza artificiale e immaginazione combinati.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-concept-del-personaggio"&gt;Il concept del personaggio
&lt;/h2&gt;&lt;p&gt;Tony Loffa √® nato per caso e anche per scherzo. Da una battuta tra amici √® emersa l‚Äôidea di un personaggio che &lt;strong&gt;doveva&lt;/strong&gt; esistere: un rapper surreale, sopra le righe, con un‚Äôidentit√† precisa e un mondo tutto suo.&lt;/p&gt;
&lt;p&gt;Tony non rappresenta nessuno in particolare, non √® la caricatura di un artista reale: √® la &lt;strong&gt;parodia di un‚Äôintera scena musicale&lt;/strong&gt;. Un concentrato di clich√© portati all‚Äôestremo ‚Äî ostentazione, soldi, gang, catene d‚Äôoro ‚Äî ma rielaborati con un tono volutamente grottesco e ironico. √à la satira di un certo modo di ‚Äúfare trap‚Äù, di quell‚Äôimmaginario spinto all‚Äôeccesso, in cui tutto √® pi√π grande, pi√π rumoroso, pi√π ‚Äúgasato‚Äù.&lt;/p&gt;
&lt;p&gt;Eppure, dietro il nonsense, ho cercato di dare &lt;strong&gt;coerenza&lt;/strong&gt;. Tony Loffa ha una voce, uno stile, un‚Äôestetica ben definiti: la &lt;strong&gt;Gang Gassosa&lt;/strong&gt;, i beat sporchi e martellanti, i testi che oscillano tra l‚Äôassurdo e il dissacrante. L‚Äôho creato per ridere della trap, ma finisce per sembrare quasi reale: ho usato l&amp;rsquo;IA per raccogliere le idee e distillare una biografia che unisse l‚Äôassurdit√† di un rapper fatto di gas pestilenziale all‚Äôestetica della periferia romana.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="la-voce-e-lo-stile"&gt;La voce e lo stile
&lt;/h2&gt;&lt;p&gt;La voce di Tony Loffa √® &lt;strong&gt;profonda, sporca, piena di aria e di strada&lt;/strong&gt;.&lt;br&gt;
Non punta alla perfezione, non cerca l‚Äôautotune impeccabile: √® &lt;strong&gt;grezza per scelta&lt;/strong&gt;, volutamente imperfetta, come se portasse addosso l‚Äôodore delle periferie che racconta.&lt;/p&gt;
&lt;p&gt;Tony non canta: &lt;strong&gt;sputa parole&lt;/strong&gt;.&lt;br&gt;
Ogni verso √® corto, secco, diretto, come un colpo di beat. Alterna parlato e cantato, si ferma e riparte, creando un caos controllato che rende ogni traccia imprevedibile.&lt;/p&gt;
&lt;p&gt;Lo stile mescola slang romano, inglese maccheronico e termini inventati, costruendo un linguaggio &lt;strong&gt;ibrido, gassoso, immediatamente riconoscibile&lt;/strong&gt;. Nei testi non importa solo cosa viene detto, ma &lt;strong&gt;come&lt;/strong&gt; viene detto: tronfio, sicuro di s√©, mistico quando parla della &lt;strong&gt;Gang Gassosa&lt;/strong&gt;, ironico e autocelebrativo subito dopo.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-processo-creativo"&gt;Il processo creativo
&lt;/h2&gt;&lt;p&gt;Per scrivere i testi di Tony Loffa ho deciso di sperimentare con le &lt;strong&gt;IA generative&lt;/strong&gt;, trattandole come strumenti creativi e non come autori. Io ho definito l‚Äôidentit√† di Tony, il suo stile, i temi di ogni brano e buona parte dei contenuti, ma ho delegato la &lt;strong&gt;composizione finale&lt;/strong&gt; a un modello di intelligenza artificiale.&lt;/p&gt;
&lt;p&gt;Il mio lavoro √® stato quello di &lt;strong&gt;costruire prompt estremamente dettagliati&lt;/strong&gt;: ogni richiesta includeva il tono, il ritmo, la voce, la struttura di strofa e ritornello, i riferimenti stilistici, perfino l‚Äôuso degli intercalari e delle onomatopee tipiche del personaggio.&lt;br&gt;
L‚Äôobiettivo era generare testi &lt;strong&gt;‚Äúdigeribili‚Äù&lt;/strong&gt; per l‚ÄôIA successiva, &lt;a class="link" href="https://suno.com" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Suno AI&lt;/strong&gt;&lt;/a&gt;, che si sarebbe occupata della &lt;strong&gt;generazione musicale vera e propria&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Con Suno, ogni prompt definiva voce, beat e mood complessivo: funk sporco, trap grottesca, atmosfera urbana, toni ironici e aggressivi. Io ho controllato e rifinito ogni brano, adattando i testi per mantenere la coerenza del personaggio e la credibilit√† del risultato.&lt;/p&gt;
&lt;p&gt;Tony Loffa √® nato da una &lt;strong&gt;scrittura a quattro mani&lt;/strong&gt;: da un lato la mia visione creativa, dall‚Äôaltro la capacit√† combinata di IA testuale e musicale di trasformare quelle idee in un progetto sonoro completo. Questo approccio mi ha permesso di sperimentare uno stile ibrido: satirico, sporco, ma con un flow che &lt;strong&gt;suona&lt;/strong&gt; autentico.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-risultato-un-rapper-coerente-una-critica-inattesa"&gt;Il risultato: un rapper coerente, una critica inattesa
&lt;/h2&gt;&lt;p&gt;Quello che era nato come un esperimento √® diventato qualcosa di pi√π.&lt;br&gt;
Doveva essere solo una battuta, ma Tony Loffa &lt;strong&gt;ha un‚Äôidentit√†, una voce, una discografia, una gang immaginaria e un mondo narrativo coerente&lt;/strong&gt;, con brani come &lt;em&gt;Aria Condizionata&lt;/em&gt;, &lt;em&gt;Puzza di Soldi&lt;/em&gt; e &lt;em&gt;Gang Gassosa&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ed √® qui che l‚Äôesperimento √® diventato interessante: senza volerlo, &lt;strong&gt;Tony Loffa √® anche una critica al culto dell‚Äôeffimero&lt;/strong&gt;.&lt;br&gt;
La trap che parodizza vive di icone usa-e-getta, di personaggi costruiti pi√π sull‚Äôimmagine che sulla sostanza, e l‚ÄôIA amplifica questa dinamica: un personaggio totalmente inventato diventa immediatamente &lt;strong&gt;plausibile&lt;/strong&gt;. Tony √® un‚Äôillusione‚Ä¶ che funziona proprio perch√© il mondo che rappresenta &lt;strong&gt;√® gi√† un po‚Äô un‚Äôillusione&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In questo senso, Tony Loffa √® sia &lt;strong&gt;gioco narrativo&lt;/strong&gt; che &lt;strong&gt;commento sociale&lt;/strong&gt;:&lt;br&gt;
un personaggio nato per ridere della scena musicale, ma che finisce per far riflettere su come oggi costruiamo identit√†, su quanto crediamo a quello che vediamo, e su come il confine tra realt√† e finzione sia sempre pi√π sottile.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-prompt"&gt;Il prompt
&lt;/h2&gt;&lt;p&gt;Scrivere una canzone per Tony Loffa non significava solo inventare dei testi: dovevo creare prompt dettagliati che catturassero tono, ritmo, linguaggio e atmosfera.
Ho trattato l‚ÄôIA come un collaboratore, dandole tutte le informazioni necessarie per entrare nella testa di Tony: struttura della canzone, tipo di beat, temi da affrontare, slang da usare e perfino le interiezioni tipiche del personaggio.
Ogni prompt √® stato pensato per essere digeribile da Suno AI, in modo che la generazione musicale fosse il pi√π possibile coerente con lo stile del personaggio.&lt;/p&gt;
&lt;p&gt;Questo √® un esempio
di prompt che ho usato per generare il testo di &lt;em&gt;Puzza di Soldi&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-markdown" data-lang="markdown"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Agisci come un esperto compositore di musica e canzoni. Ti fornir√≤ le informazioni sulle quali basarti e tu creerai una canzone.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Usa la lingua italiana per le interazioni con me.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Mi chiederai le informazioni necessarie alla creazione della canzone:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Di cosa parla
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Se c&amp;#39;√® uno stile particolare da seguire (es. epico orchestrale, rock elettronico, ballata da taverna, ecc.)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; In che lingua deve essere scritto il testo della canzone
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Se ci sono ruoli di voce specifici o strutture particolari (es. call-and-response, dialoghi tra personaggi)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Qualsiasi altro dettaglio utile (ambientazione, epoca storica, atmosfera, strumenti preferiti, tono emotivo)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Il pezzo musicale deve avere i titoli delle sezioni in inglese tra parentesi quadre.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;I titoli delle sezioni fanno riferimento al tipo di sezione del pezzo musicale (es. [Chorus], [Verse 1], [Verse 2], [Bridge], ecc.).
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Puoi indicare anche il ruolo o il tipo di voce che canta ogni parte, sempre in inglese, all‚Äôinizio della riga:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Esempio: [Bard], [Chorus - Drunks], [Whispered Voices], [Narrator], ecc.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Eventuali informazioni aggiuntive (voce maschile o femminile, crescendo di violini, rap veloce, cori epici, ecc.) vanno inserite in una riga diversa dal titolo della sezione, sempre tra parentesi quadre.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Specifica sempre una sezione finale [Style] in inglese che descriva:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Strumenti
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Atmosfera
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Intensit√†
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Tipo di voce
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Eventuali effetti sonori di contorno (taverna rumorosa, tempesta, folla, ecc.)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Il testo della canzone pu√≤ essere in qualsiasi lingua scelta dall‚Äôutente, ma:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Le indicazioni tecniche (ruoli, strumenti, stile, descrizioni) devono essere sempre in inglese.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Per creare il testo, chiedi:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;1.&lt;/span&gt; Tema e contenuto della canzone
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;2.&lt;/span&gt; Stile musicale
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;3.&lt;/span&gt; Lingua del testo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;4.&lt;/span&gt; Tono e atmosfera (eroico, drammatico, ironico, burlesco, ecc.)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;5.&lt;/span&gt; Ambientazione (se rilevante)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;6.&lt;/span&gt; Eventuali ruoli di voce e struttura (es. call-and-response)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ovviamente il prompt da solo non basta e a seguito di quello, per ogni pezzo, ci sono state innumerevoli interazioni con l&amp;rsquo;IA per raffinare, correggere, inserire nuove parti e tagliarne di altre.
L&amp;rsquo;IA √® uno strumento ma senza creativit√† il risultato √® piatto e io volevo che i pezzi avessero un minimo di personalit√†.
Ci √® voluto un po&amp;rsquo; e si vede, anzi si sente, perch√© la prima traccia &amp;ldquo;Loffa e Nanna&amp;rdquo; √® la meno riuscita.&lt;/p&gt;
&lt;p&gt;Per ogni traccia poi c&amp;rsquo;√® stato anche un processo di raffinamento: generavo la canzone su Suno, ascoltavo e puntualmente c&amp;rsquo;erano delle modifiche da fare per ritmo, rime sghembe, oppure frasi che semplicemente non &amp;ldquo;suonavano&amp;rdquo;. Quindi dopo una serie di rimbalzi tra IA, correzioni, Suno, altre correzioni finalmente avevo una versione che potevo considerare definitiva.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="la-distribuzione"&gt;La distribuzione
&lt;/h2&gt;&lt;p&gt;Una volta completato Aria Pesante, non potevo fermarmi l√¨.
Ho deciso di caricare l‚Äôalbum su &lt;a class="link" href="https://www.routenote.com" target="_blank" rel="noopener"
&gt;RouteNote&lt;/a&gt; per distribuirlo sulle principali piattaforme di streaming: Spotify, Apple Music, Amazon Music e molte altre.&lt;/p&gt;
&lt;p&gt;Non l‚Äôho fatto per soldi ‚Äî so perfettamente che non diventer√≤ ricco con la Gang Gassosa ‚Äî ma per sfizio personale.
L‚Äôidea che Tony Loffa, nato da una battuta, possa comparire accanto ad artisti veri in playlist reali mi diverte e mi affascina allo stesso tempo. √à un po‚Äô come completare il cerchio: un personaggio immaginario che invade il mondo reale.&lt;/p&gt;
&lt;p&gt;Se vi venisse la curiosit√† di ascoltarlo trovate qui i riferimenti &lt;a class="link" href="https://push.fm/fl/lbewxjfs" target="_blank" rel="noopener"
&gt;https://push.fm/fl/lbewxjfs&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="conclusione"&gt;Conclusione
&lt;/h2&gt;&lt;p&gt;La parte pi√π ironica? &lt;strong&gt;A me la trap nemmeno piace&lt;/strong&gt;.&lt;br&gt;
Tony Loffa √® nato per scherzo, ma √® diventato un progetto coerente, credibile e satirico.&lt;br&gt;
Forse, in un mondo dove l‚Äôimmagine conta pi√π della sostanza, &lt;strong&gt;basta un nome e una buona storia per sembrare reali&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="tony-card" style="
display: flex;
flex-direction: column;
align-items: center;
background-color: #1e1e1e;
border-radius: 16px;
padding: 20px;
max-width: 450px;
margin: 2rem auto;
box-shadow: 0 4px 20px rgba(0,0,0,0.3);
"&gt;
&lt;img src="https://procionegobbo.it/blog/tony-loffa-card.jpg" alt="Tony Loffa" style="
border-radius: 12px;
width: 100%;
object-fit: cover;
margin-bottom: 15px;
"&gt;
&lt;h2 style="color: #fff; margin: 0;"&gt;Tony Loffa&lt;/h2&gt;
&lt;p style="color: #aaa; font-style: italic; margin: 4px 0 12px;"&gt;
‚ÄúZero compromessi, zero filtri, solo essenza gassosa.‚Äù
&lt;/p&gt;
&lt;ul style="list-style: none; padding: 0; margin: 0; color: #ddd; font-size: 14px;"&gt;
&lt;li&gt;&lt;strong&gt;üìç Nato a:&lt;/strong&gt; Centocelle, Roma&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;üìÖ Anno di nascita:&lt;/strong&gt; 1995 (forse)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;üé§ Genere:&lt;/strong&gt; Trap gassosa, funk sporco, beat corrosivi&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;üí® Filosofia:&lt;/strong&gt; Purismo gassoso ‚Äî niente featuring, niente festival, niente compromessi&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;üìÄ Album:&lt;/strong&gt; &lt;a href="https://push.fm/fl/lbewxjfs"&gt;&lt;em&gt;Aria Pesante&lt;/em&gt; (2025)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;üëë Crew:&lt;/strong&gt; Gang Gassosa&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go</title><link>https://procionegobbo.it/blog/read-methods-golang/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/read-methods-golang/</guid><description>&lt;img src="https://procionegobbo.it/blog/read-methods-golang/bufioreader.jpeg" alt="Featured image of post Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go" /&gt;&lt;h1 id="-confronto-metodi-di-bufioreader-in-go"&gt;üìö Confronto metodi di &lt;code&gt;bufio.Reader&lt;/code&gt; in Go
&lt;/h1&gt;&lt;h2 id="introduzione"&gt;Introduzione
&lt;/h2&gt;&lt;p&gt;Recentemente sto studiando &lt;a class="link" href="https://go.dev/" target="_blank" rel="noopener"
&gt;Go&lt;/a&gt;, linguaggio interessante e per me √® un ritorno (ho iniziato a programmare col C) ad un tipo di programmazione profondamente diversa da quella che ho praticato negli ultimi anni specializzandomi su PHP/Laravel.
Una delle cose che mi interessano √® come leggere e scrivere da uno stream quindi, con l&amp;rsquo;aiuto di una IA mi sono fatto un veloce riepilogo delle differenze tra alcuni metodi della libreria &lt;code&gt;bufio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I metodi &lt;strong&gt;&lt;code&gt;ReadRune&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReadBytes&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReadString&lt;/code&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;code&gt;ReadLine&lt;/code&gt;&lt;/strong&gt; sono molto simili ma solo in apparenza.
Ecco una guida rapida per capire le differenze.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="tabella-comparativa"&gt;Tabella comparativa
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metodo&lt;/th&gt;
&lt;th&gt;Firma&lt;/th&gt;
&lt;th&gt;Cosa legge&lt;/th&gt;
&lt;th&gt;Tipo restituito&lt;/th&gt;
&lt;th&gt;Include &lt;code&gt;\n&lt;/code&gt;?&lt;/th&gt;
&lt;th&gt;Note pratiche&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadRune()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(r rune, size int, err error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Un singolo carattere Unicode&lt;/strong&gt; (1 rune)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rune&lt;/code&gt; (+size+err)&lt;/td&gt;
&lt;td&gt;N/A (legge solo 1 carattere)&lt;/td&gt;
&lt;td&gt;Utile per analizzare caratteri uno alla volta (UTF-8 safe).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadBytes(delim byte)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;([]byte, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fino a &lt;code&gt;delim&lt;/code&gt; incluso&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;‚úÖ s√¨&lt;/td&gt;
&lt;td&gt;Restituisce slice di byte, ottimo per parsing binario o testo grezzo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadString(delim byte)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(string, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fino a &lt;code&gt;delim&lt;/code&gt; incluso&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;‚úÖ s√¨&lt;/td&gt;
&lt;td&gt;Comodo se sai di leggere testo, meno efficiente di &lt;code&gt;ReadBytes&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadLine()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;([]byte, isPrefix bool, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Una riga (senza &lt;code&gt;\n&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]byte&lt;/code&gt; + &lt;code&gt;isPrefix&lt;/code&gt; + &lt;code&gt;err&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;‚ùå no&lt;/td&gt;
&lt;td&gt;Se la riga √® troppo lunga, la restituisce a pezzi (&lt;code&gt;isPrefix = true&lt;/code&gt;). Serve loop per ricomporla. Pi√π basso livello.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="-diagramma-di-flusso-decisionale"&gt;üîÄ Diagramma di flusso decisionale
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Vuoi leggere 1 carattere? ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Usa ReadRune() ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚ñº
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Vuoi leggere fino a un ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ delimitatore (es. &amp;#39;\n&amp;#39;)? ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ | ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê | ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Ti serve un []byte? ‚îÇ | ‚îÇ Ti serve una stringa?‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò | ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ | ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê | ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Usa ReadBytes() ‚îÇ | ‚îÇ Usa ReadString() ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò | ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚ñº
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Devi gestire linee molto ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ lunghe (buffer a pezzi)? ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îÇ Usa ReadLine() ‚îÇ
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="esempio-pratico"&gt;Esempio pratico
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;bufio&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;caf√©\nseconda linea\nterza linea senza newline finale&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadRune(): legge un singolo carattere Unicode alla volta ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadRune() ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &amp;lt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt; { &lt;span style="color:#75715e"&gt;// leggo le prime 4 rune: c, a, f, √©&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ru&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadRune&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Errore ReadRune:&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;rune=%q size=%d\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ru&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadBytes(&amp;#39;\n&amp;#39;): legge fino al delimitatore incluso e restituisce []byte ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadBytes(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadBytes&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Errore ReadBytes:&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ReadBytes: %q (len=%d)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadString(&amp;#39;\n&amp;#39;): stesso comportamento ma restituisce string ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadString(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Errore ReadString:&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ReadString: %q (len=%d)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadLine(): NON include &amp;#39;\n&amp;#39; e pu√≤ restituire porzioni (isPrefix=true) ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Forziamo una linea pi√π lunga del buffer per vedere isPrefix=true.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadLine() con buffer piccolo e isPrefix ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;longLine&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;abcdefghij\n&amp;#34;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 10 caratteri + &amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;smallBuf&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReaderSize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;longLine&lt;/span&gt;), &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt; [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;smallBuf&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadLine&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// fine input o errore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Copia difensiva del frammento letto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt;, append([]byte(&lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;), &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;chunk=%q isPrefix=%v\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;recombined&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Join&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Ricomposta: %q (pezzi=%d)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;recombined&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- Esempio classico di ReadLine su testo normale (senza superare il buffer) ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadLine() normale ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadLine&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;line=%q isPrefix=%v (niente &amp;#39;\\n&amp;#39;)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="conclusioni"&gt;Conclusioni
&lt;/h2&gt;&lt;h3 id="in-sintesi-veloce"&gt;In sintesi veloce:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ReadRune&lt;/code&gt; ‚Üí analisi carattere-per-carattere, sicuro su UTF-8.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadBytes&lt;/code&gt; ‚Üí legge fino al delimitatore e restituisce &lt;code&gt;[]byte&lt;/code&gt; (ottimo per parsing binario/grezzo).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadString&lt;/code&gt; ‚Üí come sopra ma restituisce string (pi√π comodo, pi√π allocazioni).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadLine&lt;/code&gt; ‚Üí non include &lt;code&gt;\n&lt;/code&gt;, gestisce linee molto lunghe a pezzi con &lt;code&gt;isPrefix&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="insidie-comuni-da-ricordare"&gt;Insidie comuni da ricordare:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fine riga su Windows √® &lt;code&gt;\r\n&lt;/code&gt;: rimuovi il &lt;code&gt;\r&lt;/code&gt; finale se leggi fino a &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bufio.Scanner&lt;/code&gt; ha un limite di token (‚âà64 KB) che va aumentato per righe grandi.&lt;/li&gt;
&lt;li&gt;Le allocazioni: &lt;code&gt;ReadString&lt;/code&gt; crea sempre una nuova stringa; con &lt;code&gt;ReadBytes&lt;/code&gt; puoi restare su &lt;code&gt;[]byte&lt;/code&gt; finch√© serve.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cosa-usare-quando"&gt;Cosa usare quando:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Parsing binario o attenzione alle allocazioni ‚Üí &lt;code&gt;ReadBytes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Input testuale ‚Äúline-oriented‚Äù ‚Üí &lt;code&gt;ReadString&lt;/code&gt; (oppure Scanner).&lt;/li&gt;
&lt;li&gt;Analisi fine di rune (accenti/emoji) ‚Üí &lt;code&gt;ReadRune&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Log/file con righe enormi ‚Üí &lt;code&gt;ReadLine&lt;/code&gt; (ricomponi quando &lt;code&gt;isPrefix&lt;/code&gt; == true).&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Ciao mondo</title><link>https://procionegobbo.it/blog/hello-world/</link><pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/hello-world/</guid><description>&lt;p&gt;Sono passati 21 anni dal mio primo blog, il mondo √® cambiato, internet √® cambiato e io anche.&lt;/p&gt;
&lt;p&gt;It‚Äôs been 21 years since my first blog ‚Äî the world has changed, the internet has changed, and so have I.&lt;/p&gt;</description></item></channel></rss>