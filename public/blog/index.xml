<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Federico Maiorini</title><link>https://procionegobbo.it/blog/</link><description>Recent content in Blogs on Federico Maiorini</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Thu, 28 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://procionegobbo.it/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Testare le GitHub Actions in locale con act</title><link>https://procionegobbo.it/blog/testare-github-actions-in-locale-act/</link><pubDate>Thu, 28 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/testare-github-actions-in-locale-act/</guid><description>&lt;img src="https://procionegobbo.it/blog/testare-github-actions-in-locale-act/act.jpg" alt="Featured image of post Testare le GitHub Actions in locale con act" /&gt;&lt;p&gt;Chi usa GitHub prima o poi si scontra con i workflow. Di recente stiamo affrontando una sfida solo all&amp;rsquo;apparenza banale: migrare alcuni dei nostri repo su Github e implementare le actions necessarie alle necessità di CI/CD.&lt;/p&gt;
&lt;p&gt;Di base sarebbe banale, in rete ci sono gazilioni di esempi, template, guide e perfino wizard che, in teoria, ti forniscono gli script già pronti.&lt;/p&gt;
&lt;p&gt;Migrando uno degli ultimi repo però mi è successa una cosa particolare. Stavo usando per il workflow da eseguire sulle pull-request lo stesso script usato con successo in altri repo (sono tutti sistemi basati su Laravel). Questa volta però non andava, errori di connessione al db, test che fallivano in maniera inaspettata.&lt;/p&gt;
&lt;p&gt;Tentavo le correzioni, push su GitHub, interminabile attesa che il workflow girasse per esaminare gli errori.&lt;/p&gt;
&lt;p&gt;Un modo mooolto lento di procedere.&lt;/p&gt;
&lt;h2 id="installare-e-usare-act-per-testare-le-github-actions"&gt;Installare e usare act per testare le GitHub Actions
&lt;/h2&gt;&lt;p&gt;Per fortuna c&amp;rsquo;è un&amp;rsquo;alternativa: &lt;a class="link" href="https://nektosact.com/" target="_blank" rel="noopener"
&gt;&lt;strong&gt;act&lt;/strong&gt; - https://nektosact.com/&lt;/a&gt;
questa fantastica utility scritta in Go permette di eseguire le actions di GitHub in locale grazie alla creazione al volo di una serie di container (nel mio caso uso &lt;a class="link" href="https://podman.io/" target="_blank" rel="noopener"
&gt;Podman&lt;/a&gt; invece di Docker).&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;installazione è banale, nel mio caso su Mac&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install act
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dopodiché basta avere il servizio Docker (o Podman) attivo e lanciare l&amp;rsquo;utility.&lt;/p&gt;
&lt;p&gt;Ecco un esempio completo di comando, con tutti i parametri che uso nel mio ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;act &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --workflows &lt;span style="color:#e6db74"&gt;&amp;#34;.github/workflows/main.yml&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --secret-file .secrets &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --var-file .vars &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --pull&lt;span style="color:#f92672"&gt;=&lt;/span&gt;false &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --container-architecture linux/arm64 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -P ubuntu-latest&lt;span style="color:#f92672"&gt;=&lt;/span&gt;catthehacker/ubuntu:act-latest &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -P self-hosted&lt;span style="color:#f92672"&gt;=&lt;/span&gt;catthehacker/ubuntu:act-latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="configurare-act-i-parametri-principali"&gt;Configurare act: i parametri principali
&lt;/h2&gt;&lt;p&gt;Vi spiego i vari parametri:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parametro&lt;/th&gt;
&lt;th&gt;Descrizione&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--workflows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Path del file &lt;code&gt;.yml&lt;/code&gt; del workflow da eseguire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--secret-file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Variabili &lt;strong&gt;SECRET&lt;/strong&gt; in formato &lt;code&gt;NOME=valore&lt;/code&gt; (una per riga)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--var-file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Variabili &lt;strong&gt;VARIABLE&lt;/strong&gt; in formato &lt;code&gt;NOME=valore&lt;/code&gt; (una per riga)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pull&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Se &lt;code&gt;false&lt;/code&gt;, evita di scaricare ogni volta l’immagine del container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--container-architecture&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Architettura da usare per i container (es. &lt;code&gt;linux/arm64&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Specifica l’immagine da usare per il container che eseguirà il workflow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Nel mio caso per il container ho scelto &lt;code&gt;catthehacker/ubuntu:act-latest&lt;/code&gt; rispetto a &lt;code&gt;catthehacker/ubuntu:full-latest&lt;/code&gt; perché quest&amp;rsquo;ultima, anche se ha la massima compatibilità integrando praticamente tutti i tool necessari, è enorme (60Gb una volta estratta) e non era necessaria.&lt;/p&gt;
&lt;h2 id="conclusioni-perché-usare-act"&gt;Conclusioni: perché usare act
&lt;/h2&gt;&lt;p&gt;Utilizzare &lt;code&gt;act&lt;/code&gt; mi ha permesso di testare molto più velocemente il workflow, individuare i problemi e correggerlo in una frazione del tempo rispetto al classico
&lt;code&gt;edit-&amp;gt;commit-&amp;gt;push-&amp;gt;execute action-&amp;gt;repeat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Un&amp;rsquo;ultima cosa. Una volta messo a punto il workflow, girava perfettamente su act, è successo che alcuni test fallissero una volta che il workflow veniva eseguito su GitHub. La spiegazione è tanto banale quanto insidiosa: &lt;code&gt;act&lt;/code&gt;, ma anche un banale &lt;code&gt;php artisan test&lt;/code&gt; useranno il vostro file &lt;code&gt;.env&lt;/code&gt; se presente. Tenetene conto quando scrivete il workflow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota importante ⚠️&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;act&lt;/code&gt; utilizza il file &lt;code&gt;.env&lt;/code&gt; locale per eseguire i test, mentre GitHub Actions potrebbe avere un contesto diverso.&lt;br&gt;
Assicurati di configurare correttamente le variabili d’ambiente nel workflow per evitare comportamenti inattesi.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="link-utili"&gt;Link utili
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://nektosact.com/" target="_blank" rel="noopener"
&gt;Documentazione ufficiale di act&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://docs.github.com/en/actions" target="_blank" rel="noopener"
&gt;Documentazione ufficiale GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Come nasce un rapper fatto di gas: dietro le quinte di Tony Loffa</title><link>https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/</guid><description>&lt;img src="https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/cover.png" alt="Featured image of post Come nasce un rapper fatto di gas: dietro le quinte di Tony Loffa" /&gt;&lt;h2 id="lidea-iniziale"&gt;L’idea iniziale
&lt;/h2&gt;&lt;p&gt;Tutto è nato per caso, durante una serata in cui avremmo dovuto uscire tra amici. Uno di loro, per tirarsi fuori con una battuta, se ne uscì con:&lt;br&gt;
&lt;strong&gt;&amp;ldquo;Non posso, devo andare al concerto di Tony Loffa.&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quel nome — &lt;em&gt;Tony Loffa&lt;/em&gt; — mi ha fulminato.&lt;br&gt;
Non so spiegare bene cosa sia scattato, ma nel giro di pochi minuti il mio cervello aveva già dato forma al personaggio: un rapper assurdo, grottesco, con un’identità fortissima. Una parodia vivente, eppure dotata di coerenza interna, di un mondo suo.&lt;/p&gt;
&lt;p&gt;Tony Loffa &lt;strong&gt;non è ispirato a nessuno di reale&lt;/strong&gt;, non è la caricatura di una persona esistente. È piuttosto una &lt;strong&gt;satira dell’intera scena trap&lt;/strong&gt;, dei suoi eccessi, dei suoi cliché. Ma non è nemmeno una critica amara o moralista: è solo satira, fatta con ironia e creatività, come un esperimento di intelligenza artificiale e immaginazione combinati.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-concept-del-personaggio"&gt;Il concept del personaggio
&lt;/h2&gt;&lt;p&gt;Tony Loffa è nato per caso e anche per scherzo. Da una battuta tra amici è emersa l’idea di un personaggio che &lt;strong&gt;doveva&lt;/strong&gt; esistere: un rapper surreale, sopra le righe, con un’identità precisa e un mondo tutto suo.&lt;/p&gt;
&lt;p&gt;Tony non rappresenta nessuno in particolare, non è la caricatura di un artista reale: è la &lt;strong&gt;parodia di un’intera scena musicale&lt;/strong&gt;. Un concentrato di cliché portati all’estremo — ostentazione, soldi, gang, catene d’oro — ma rielaborati con un tono volutamente grottesco e ironico. È la satira di un certo modo di “fare trap”, di quell’immaginario spinto all’eccesso, in cui tutto è più grande, più rumoroso, più “gasato”.&lt;/p&gt;
&lt;p&gt;Eppure, dietro il nonsense, ho cercato di dare &lt;strong&gt;coerenza&lt;/strong&gt;. Tony Loffa ha una voce, uno stile, un’estetica ben definiti: la &lt;strong&gt;Gang Gassosa&lt;/strong&gt;, i beat sporchi e martellanti, i testi che oscillano tra l’assurdo e il dissacrante. L’ho creato per ridere della trap, ma finisce per sembrare quasi reale: ho usato l&amp;rsquo;IA per raccogliere le idee e distillare una biografia che unisse l’assurdità di un rapper fatto di gas pestilenziale all’estetica della periferia romana.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="la-voce-e-lo-stile"&gt;La voce e lo stile
&lt;/h2&gt;&lt;p&gt;La voce di Tony Loffa è &lt;strong&gt;profonda, sporca, piena di aria e di strada&lt;/strong&gt;.&lt;br&gt;
Non punta alla perfezione, non cerca l’autotune impeccabile: è &lt;strong&gt;grezza per scelta&lt;/strong&gt;, volutamente imperfetta, come se portasse addosso l’odore delle periferie che racconta.&lt;/p&gt;
&lt;p&gt;Tony non canta: &lt;strong&gt;sputa parole&lt;/strong&gt;.&lt;br&gt;
Ogni verso è corto, secco, diretto, come un colpo di beat. Alterna parlato e cantato, si ferma e riparte, creando un caos controllato che rende ogni traccia imprevedibile.&lt;/p&gt;
&lt;p&gt;Lo stile mescola slang romano, inglese maccheronico e termini inventati, costruendo un linguaggio &lt;strong&gt;ibrido, gassoso, immediatamente riconoscibile&lt;/strong&gt;. Nei testi non importa solo cosa viene detto, ma &lt;strong&gt;come&lt;/strong&gt; viene detto: tronfio, sicuro di sé, mistico quando parla della &lt;strong&gt;Gang Gassosa&lt;/strong&gt;, ironico e autocelebrativo subito dopo.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-processo-creativo"&gt;Il processo creativo
&lt;/h2&gt;&lt;p&gt;Per scrivere i testi di Tony Loffa ho deciso di sperimentare con le &lt;strong&gt;IA generative&lt;/strong&gt;, trattandole come strumenti creativi e non come autori. Io ho definito l’identità di Tony, il suo stile, i temi di ogni brano e buona parte dei contenuti, ma ho delegato la &lt;strong&gt;composizione finale&lt;/strong&gt; a un modello di intelligenza artificiale.&lt;/p&gt;
&lt;p&gt;Il mio lavoro è stato quello di &lt;strong&gt;costruire prompt estremamente dettagliati&lt;/strong&gt;: ogni richiesta includeva il tono, il ritmo, la voce, la struttura di strofa e ritornello, i riferimenti stilistici, perfino l’uso degli intercalari e delle onomatopee tipiche del personaggio.&lt;br&gt;
L’obiettivo era generare testi &lt;strong&gt;“digeribili”&lt;/strong&gt; per l’IA successiva, &lt;a class="link" href="https://suno.com" target="_blank" rel="noopener"
&gt;&lt;strong&gt;Suno AI&lt;/strong&gt;&lt;/a&gt;, che si sarebbe occupata della &lt;strong&gt;generazione musicale vera e propria&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Con Suno, ogni prompt definiva voce, beat e mood complessivo: funk sporco, trap grottesca, atmosfera urbana, toni ironici e aggressivi. Io ho controllato e rifinito ogni brano, adattando i testi per mantenere la coerenza del personaggio e la credibilità del risultato.&lt;/p&gt;
&lt;p&gt;Tony Loffa è nato da una &lt;strong&gt;scrittura a quattro mani&lt;/strong&gt;: da un lato la mia visione creativa, dall’altro la capacità combinata di IA testuale e musicale di trasformare quelle idee in un progetto sonoro completo. Questo approccio mi ha permesso di sperimentare uno stile ibrido: satirico, sporco, ma con un flow che &lt;strong&gt;suona&lt;/strong&gt; autentico.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-risultato-un-rapper-coerente-una-critica-inattesa"&gt;Il risultato: un rapper coerente, una critica inattesa
&lt;/h2&gt;&lt;p&gt;Quello che era nato come un esperimento è diventato qualcosa di più.&lt;br&gt;
Doveva essere solo una battuta, ma Tony Loffa &lt;strong&gt;ha un’identità, una voce, una discografia, una gang immaginaria e un mondo narrativo coerente&lt;/strong&gt;, con brani come &lt;em&gt;Aria Condizionata&lt;/em&gt;, &lt;em&gt;Puzza di Soldi&lt;/em&gt; e &lt;em&gt;Gang Gassosa&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ed è qui che l’esperimento è diventato interessante: senza volerlo, &lt;strong&gt;Tony Loffa è anche una critica al culto dell’effimero&lt;/strong&gt;.&lt;br&gt;
La trap che parodizza vive di icone usa-e-getta, di personaggi costruiti più sull’immagine che sulla sostanza, e l’IA amplifica questa dinamica: un personaggio totalmente inventato diventa immediatamente &lt;strong&gt;plausibile&lt;/strong&gt;. Tony è un’illusione… che funziona proprio perché il mondo che rappresenta &lt;strong&gt;è già un po’ un’illusione&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In questo senso, Tony Loffa è sia &lt;strong&gt;gioco narrativo&lt;/strong&gt; che &lt;strong&gt;commento sociale&lt;/strong&gt;:&lt;br&gt;
un personaggio nato per ridere della scena musicale, ma che finisce per far riflettere su come oggi costruiamo identità, su quanto crediamo a quello che vediamo, e su come il confine tra realtà e finzione sia sempre più sottile.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="il-prompt"&gt;Il prompt
&lt;/h2&gt;&lt;p&gt;Scrivere una canzone per Tony Loffa non significava solo inventare dei testi: dovevo creare prompt dettagliati che catturassero tono, ritmo, linguaggio e atmosfera.
Ho trattato l’IA come un collaboratore, dandole tutte le informazioni necessarie per entrare nella testa di Tony: struttura della canzone, tipo di beat, temi da affrontare, slang da usare e perfino le interiezioni tipiche del personaggio.
Ogni prompt è stato pensato per essere digeribile da Suno AI, in modo che la generazione musicale fosse il più possibile coerente con lo stile del personaggio.&lt;/p&gt;
&lt;p&gt;Questo è un esempio
di prompt che ho usato per generare il testo di &lt;em&gt;Puzza di Soldi&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-markdown" data-lang="markdown"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Agisci come un esperto compositore di musica e canzoni. Ti fornirò le informazioni sulle quali basarti e tu creerai una canzone.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Usa la lingua italiana per le interazioni con me.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Mi chiederai le informazioni necessarie alla creazione della canzone:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Di cosa parla
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Se c&amp;#39;è uno stile particolare da seguire (es. epico orchestrale, rock elettronico, ballata da taverna, ecc.)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; In che lingua deve essere scritto il testo della canzone
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Se ci sono ruoli di voce specifici o strutture particolari (es. call-and-response, dialoghi tra personaggi)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Qualsiasi altro dettaglio utile (ambientazione, epoca storica, atmosfera, strumenti preferiti, tono emotivo)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Il pezzo musicale deve avere i titoli delle sezioni in inglese tra parentesi quadre.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;I titoli delle sezioni fanno riferimento al tipo di sezione del pezzo musicale (es. [Chorus], [Verse 1], [Verse 2], [Bridge], ecc.).
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Puoi indicare anche il ruolo o il tipo di voce che canta ogni parte, sempre in inglese, all’inizio della riga:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Esempio: [Bard], [Chorus - Drunks], [Whispered Voices], [Narrator], ecc.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Eventuali informazioni aggiuntive (voce maschile o femminile, crescendo di violini, rap veloce, cori epici, ecc.) vanno inserite in una riga diversa dal titolo della sezione, sempre tra parentesi quadre.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Specifica sempre una sezione finale [Style] in inglese che descriva:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Strumenti
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Atmosfera
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Intensità
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Tipo di voce
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Eventuali effetti sonori di contorno (taverna rumorosa, tempesta, folla, ecc.)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Il testo della canzone può essere in qualsiasi lingua scelta dall’utente, ma:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;-&lt;/span&gt; Le indicazioni tecniche (ruoli, strumenti, stile, descrizioni) devono essere sempre in inglese.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Per creare il testo, chiedi:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;1.&lt;/span&gt; Tema e contenuto della canzone
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;2.&lt;/span&gt; Stile musicale
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;3.&lt;/span&gt; Lingua del testo
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;4.&lt;/span&gt; Tono e atmosfera (eroico, drammatico, ironico, burlesco, ecc.)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;5.&lt;/span&gt; Ambientazione (se rilevante)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;6.&lt;/span&gt; Eventuali ruoli di voce e struttura (es. call-and-response)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ovviamente il prompt da solo non basta e a seguito di quello, per ogni pezzo, ci sono state innumerevoli interazioni con l&amp;rsquo;IA per raffinare, correggere, inserire nuove parti e tagliarne di altre.
L&amp;rsquo;IA è uno strumento ma senza creatività il risultato è piatto e io volevo che i pezzi avessero un minimo di personalità.
Ci è voluto un po&amp;rsquo; e si vede, anzi si sente, perché la prima traccia &amp;ldquo;Loffa e Nanna&amp;rdquo; è la meno riuscita.&lt;/p&gt;
&lt;p&gt;Per ogni traccia poi c&amp;rsquo;è stato anche un processo di raffinamento: generavo la canzone su Suno, ascoltavo e puntualmente c&amp;rsquo;erano delle modifiche da fare per ritmo, rime sghembe, oppure frasi che semplicemente non &amp;ldquo;suonavano&amp;rdquo;. Quindi dopo una serie di rimbalzi tra IA, correzioni, Suno, altre correzioni finalmente avevo una versione che potevo considerare definitiva.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="la-distribuzione"&gt;La distribuzione
&lt;/h2&gt;&lt;p&gt;Una volta completato Aria Pesante, non potevo fermarmi lì.
Ho deciso di caricare l’album su &lt;a class="link" href="https://www.routenote.com" target="_blank" rel="noopener"
&gt;RouteNote&lt;/a&gt; per distribuirlo sulle principali piattaforme di streaming: Spotify, Apple Music, Amazon Music e molte altre.&lt;/p&gt;
&lt;p&gt;Non l’ho fatto per soldi — so perfettamente che non diventerò ricco con la Gang Gassosa — ma per sfizio personale.
L’idea che Tony Loffa, nato da una battuta, possa comparire accanto ad artisti veri in playlist reali mi diverte e mi affascina allo stesso tempo. È un po’ come completare il cerchio: un personaggio immaginario che invade il mondo reale.&lt;/p&gt;
&lt;p&gt;Se vi venisse la curiosità di ascoltarlo trovate qui i riferimenti &lt;a class="link" href="https://push.fm/fl/lbewxjfs" target="_blank" rel="noopener"
&gt;https://push.fm/fl/lbewxjfs&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="conclusione"&gt;Conclusione
&lt;/h2&gt;&lt;p&gt;La parte più ironica? &lt;strong&gt;A me la trap nemmeno piace&lt;/strong&gt;.&lt;br&gt;
Tony Loffa è nato per scherzo, ma è diventato un progetto coerente, credibile e satirico.&lt;br&gt;
Forse, in un mondo dove l’immagine conta più della sostanza, &lt;strong&gt;basta un nome e una buona storia per sembrare reali&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;div class="tony-card" style="
display: flex;
flex-direction: column;
align-items: center;
background-color: #1e1e1e;
border-radius: 16px;
padding: 20px;
max-width: 450px;
margin: 2rem auto;
box-shadow: 0 4px 20px rgba(0,0,0,0.3);
"&gt;
&lt;img src="https://procionegobbo.it/blog/tony-loffa-card.jpg" alt="Tony Loffa" style="
border-radius: 12px;
width: 100%;
object-fit: cover;
margin-bottom: 15px;
"&gt;
&lt;h2 style="color: #fff; margin: 0;"&gt;Tony Loffa&lt;/h2&gt;
&lt;p style="color: #aaa; font-style: italic; margin: 4px 0 12px;"&gt;
“Zero compromessi, zero filtri, solo essenza gassosa.”
&lt;/p&gt;
&lt;ul style="list-style: none; padding: 0; margin: 0; color: #ddd; font-size: 14px;"&gt;
&lt;li&gt;&lt;strong&gt;📍 Nato a:&lt;/strong&gt; Centocelle, Roma&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;📅 Anno di nascita:&lt;/strong&gt; 1995 (forse)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;🎤 Genere:&lt;/strong&gt; Trap gassosa, funk sporco, beat corrosivi&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;💨 Filosofia:&lt;/strong&gt; Purismo gassoso — niente featuring, niente festival, niente compromessi&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;📀 Album:&lt;/strong&gt; &lt;a href="https://push.fm/fl/lbewxjfs"&gt;&lt;em&gt;Aria Pesante&lt;/em&gt; (2025)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;👑 Crew:&lt;/strong&gt; Gang Gassosa&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go</title><link>https://procionegobbo.it/blog/read-methods-golang/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/read-methods-golang/</guid><description>&lt;img src="https://procionegobbo.it/blog/read-methods-golang/bufioreader.png" alt="Featured image of post Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go" /&gt;&lt;h1 id="-confronto-metodi-di-bufioreader-in-go"&gt;📚 Confronto metodi di &lt;code&gt;bufio.Reader&lt;/code&gt; in Go
&lt;/h1&gt;&lt;h2 id="introduzione"&gt;Introduzione
&lt;/h2&gt;&lt;p&gt;Recentemente sto studiando &lt;a class="link" href="https://go.dev/" target="_blank" rel="noopener"
&gt;Go&lt;/a&gt;, linguaggio interessante e per me è un ritorno (ho iniziato a programmare col C) ad un tipo di programmazione profondamente diversa da quella che ho praticato negli ultimi anni specializzandomi su PHP/Laravel.
Una delle cose che mi interessano è come leggere e scrivere da uno stream quindi, con l&amp;rsquo;aiuto di una IA mi sono fatto un veloce riepilogo delle differenze tra alcuni metodi della libreria &lt;code&gt;bufio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I metodi &lt;strong&gt;&lt;code&gt;ReadRune&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReadBytes&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ReadString&lt;/code&gt;&lt;/strong&gt; e &lt;strong&gt;&lt;code&gt;ReadLine&lt;/code&gt;&lt;/strong&gt; sono molto simili ma solo in apparenza.
Ecco una guida rapida per capire le differenze.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="tabella-comparativa"&gt;Tabella comparativa
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Metodo&lt;/th&gt;
&lt;th&gt;Firma&lt;/th&gt;
&lt;th&gt;Cosa legge&lt;/th&gt;
&lt;th&gt;Tipo restituito&lt;/th&gt;
&lt;th&gt;Include &lt;code&gt;\n&lt;/code&gt;?&lt;/th&gt;
&lt;th&gt;Note pratiche&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadRune()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(r rune, size int, err error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Un singolo carattere Unicode&lt;/strong&gt; (1 rune)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rune&lt;/code&gt; (+size+err)&lt;/td&gt;
&lt;td&gt;N/A (legge solo 1 carattere)&lt;/td&gt;
&lt;td&gt;Utile per analizzare caratteri uno alla volta (UTF-8 safe).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadBytes(delim byte)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;([]byte, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fino a &lt;code&gt;delim&lt;/code&gt; incluso&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]byte&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✅ sì&lt;/td&gt;
&lt;td&gt;Restituisce slice di byte, ottimo per parsing binario o testo grezzo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadString(delim byte)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(string, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fino a &lt;code&gt;delim&lt;/code&gt; incluso&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✅ sì&lt;/td&gt;
&lt;td&gt;Comodo se sai di leggere testo, meno efficiente di &lt;code&gt;ReadBytes&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ReadLine()&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;([]byte, isPrefix bool, error)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Una riga (senza &lt;code&gt;\n&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]byte&lt;/code&gt; + &lt;code&gt;isPrefix&lt;/code&gt; + &lt;code&gt;err&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;❌ no&lt;/td&gt;
&lt;td&gt;Se la riga è troppo lunga, la restituisce a pezzi (&lt;code&gt;isPrefix = true&lt;/code&gt;). Serve loop per ricomporla. Più basso livello.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id="-diagramma-di-flusso-decisionale"&gt;🔀 Diagramma di flusso decisionale
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌──────────────────────────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Vuoi leggere 1 carattere? │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └───────────────┬──────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌─────────▼─────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Usa ReadRune() │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └───────────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ▼
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌──────────────────────────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Vuoi leggere fino a un │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ delimitatore (es. &amp;#39;\n&amp;#39;)? │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └───────────────┬──────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌─────────────────┼─────────────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ | │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌──────────▼──────────┐ | ┌──────────▼───────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Ti serve un []byte? │ | │ Ti serve una stringa?│
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └──────────┬──────────┘ | └───────────┬──────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ | │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌──────────▼──────────┐ | ┌───────────▼───────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Usa ReadBytes() │ | │ Usa ReadString() │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └─────────────────────┘ | └───────────────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ▼
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌──────────────────────────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Devi gestire linee molto │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ lunghe (buffer a pezzi)? │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └───────────────┬──────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ┌─────────▼─────────┐
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; │ Usa ReadLine() │
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └───────────────────┘
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="esempio-pratico"&gt;Esempio pratico
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;bufio&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;café\nseconda linea\nterza linea senza newline finale&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadRune(): legge un singolo carattere Unicode alla volta ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadRune() ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &amp;lt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt; { &lt;span style="color:#75715e"&gt;// leggo le prime 4 rune: c, a, f, é&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ru&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadRune&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Errore ReadRune:&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;rune=%q size=%d\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ru&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadBytes(&amp;#39;\n&amp;#39;): legge fino al delimitatore incluso e restituisce []byte ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadBytes(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadBytes&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Errore ReadBytes:&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ReadBytes: %q (len=%d)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadString(&amp;#39;\n&amp;#39;): stesso comportamento ma restituisce string ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadString(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Errore ReadString:&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ReadString: %q (len=%d)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- ReadLine(): NON include &amp;#39;\n&amp;#39; e può restituire porzioni (isPrefix=true) ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Forziamo una linea più lunga del buffer per vedere isPrefix=true.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadLine() con buffer piccolo e isPrefix ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;longLine&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;abcdefghij\n&amp;#34;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 10 caratteri + &amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;smallBuf&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReaderSize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;longLine&lt;/span&gt;), &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt; [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;smallBuf&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadLine&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// fine input o errore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Copia difensiva del frammento letto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt;, append([]byte(&lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;), &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;chunk=%q isPrefix=%v\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;recombined&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Join&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Ricomposta: %q (pezzi=%d)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;recombined&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;parts&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// --- Esempio classico di ReadLine su testo normale (senza superare il buffer) ---&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;== ReadLine() normale ==&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;bufio&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadLine&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;line=%q isPrefix=%v (niente &amp;#39;\\n&amp;#39;)\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;line&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;isPrefix&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="conclusioni"&gt;Conclusioni
&lt;/h2&gt;&lt;h3 id="in-sintesi-veloce"&gt;In sintesi veloce:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ReadRune&lt;/code&gt; → analisi carattere-per-carattere, sicuro su UTF-8.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadBytes&lt;/code&gt; → legge fino al delimitatore e restituisce &lt;code&gt;[]byte&lt;/code&gt; (ottimo per parsing binario/grezzo).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadString&lt;/code&gt; → come sopra ma restituisce string (più comodo, più allocazioni).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadLine&lt;/code&gt; → non include &lt;code&gt;\n&lt;/code&gt;, gestisce linee molto lunghe a pezzi con &lt;code&gt;isPrefix&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="insidie-comuni-da-ricordare"&gt;Insidie comuni da ricordare:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Fine riga su Windows è &lt;code&gt;\r\n&lt;/code&gt;: rimuovi il &lt;code&gt;\r&lt;/code&gt; finale se leggi fino a &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bufio.Scanner&lt;/code&gt; ha un limite di token (≈64 KB) che va aumentato per righe grandi.&lt;/li&gt;
&lt;li&gt;Le allocazioni: &lt;code&gt;ReadString&lt;/code&gt; crea sempre una nuova stringa; con &lt;code&gt;ReadBytes&lt;/code&gt; puoi restare su &lt;code&gt;[]byte&lt;/code&gt; finché serve.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="cosa-usare-quando"&gt;Cosa usare quando:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Parsing binario o attenzione alle allocazioni → &lt;code&gt;ReadBytes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Input testuale “line-oriented” → &lt;code&gt;ReadString&lt;/code&gt; (oppure Scanner).&lt;/li&gt;
&lt;li&gt;Analisi fine di rune (accenti/emoji) → &lt;code&gt;ReadRune&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Log/file con righe enormi → &lt;code&gt;ReadLine&lt;/code&gt; (ricomponi quando &lt;code&gt;isPrefix&lt;/code&gt; == true).&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Ciao mondo</title><link>https://procionegobbo.it/blog/hello-world/</link><pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/hello-world/</guid><description>&lt;p&gt;Sono passati 21 anni dal mio primo blog, il mondo è cambiato, internet è cambiato e io anche.&lt;/p&gt;
&lt;p&gt;It’s been 21 years since my first blog — the world has changed, the internet has changed, and so have I.&lt;/p&gt;</description></item></channel></rss>