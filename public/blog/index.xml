<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Federico Maiorini</title><link>https://procionegobbo.it/blog/</link><description>Recent content in Blogs on Federico Maiorini</description><generator>Hugo -- gohugo.io</generator><language>it-it</language><lastBuildDate>Sat, 23 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://procionegobbo.it/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Come nasce un rapper fatto di gas: dietro le quinte di Tony Loffa</title><link>https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/</link><pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/</guid><description>&lt;img src="https://procionegobbo.it/blog/dietro-le-quinte-tony-loffa/cover.png" alt="Featured image of post Come nasce un rapper fatto di gas: dietro le quinte di Tony Loffa" />&lt;h2 id="lidea-iniziale">L’idea iniziale
&lt;/h2>&lt;p>Tutto è nato per caso, durante una serata in cui avremmo dovuto uscire tra amici. Uno di loro, per tirarsi fuori con una battuta, se ne uscì con:&lt;br>
&lt;strong>&amp;ldquo;Non posso, devo andare al concerto di Tony Loffa.&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>Quel nome — &lt;em>Tony Loffa&lt;/em> — mi ha fulminato.&lt;br>
Non so spiegare bene cosa sia scattato, ma nel giro di pochi minuti il mio cervello aveva già dato forma al personaggio: un rapper assurdo, grottesco, con un’identità fortissima. Una parodia vivente, eppure dotata di coerenza interna, di un mondo suo.&lt;/p>
&lt;p>Tony Loffa &lt;strong>non è ispirato a nessuno di reale&lt;/strong>, non è la caricatura di una persona esistente. È piuttosto una &lt;strong>satira dell’intera scena trap&lt;/strong>, dei suoi eccessi, dei suoi cliché. Ma non è nemmeno una critica amara o moralista: è solo satira, fatta con ironia e creatività, come un esperimento di intelligenza artificiale e immaginazione combinati.&lt;/p>
&lt;hr>
&lt;h2 id="il-concept-del-personaggio">Il concept del personaggio
&lt;/h2>&lt;p>Tony Loffa è nato per caso e anche per scherzo. Da una battuta tra amici è emersa l’idea di un personaggio che &lt;strong>doveva&lt;/strong> esistere: un rapper surreale, sopra le righe, con un’identità precisa e un mondo tutto suo.&lt;/p>
&lt;p>Tony non rappresenta nessuno in particolare, non è la caricatura di un artista reale: è la &lt;strong>parodia di un’intera scena musicale&lt;/strong>. Un concentrato di cliché portati all’estremo — ostentazione, soldi, gang, catene d’oro — ma rielaborati con un tono volutamente grottesco e ironico. È la satira di un certo modo di “fare trap”, di quell’immaginario spinto all’eccesso, in cui tutto è più grande, più rumoroso, più “gasato”.&lt;/p>
&lt;p>Eppure, dietro il nonsense, ho cercato di dare &lt;strong>coerenza&lt;/strong>. Tony Loffa ha una voce, uno stile, un’estetica ben definiti: la &lt;strong>Gang Gassosa&lt;/strong>, i beat sporchi e martellanti, i testi che oscillano tra l’assurdo e il dissacrante. L’ho creato per ridere della trap, ma finisce per sembrare quasi reale: ho usato l&amp;rsquo;IA per raccogliere le idee e distillare una biografia che unisse l’assurdità di un rapper fatto di gas pestilenziale all’estetica della periferia romana.&lt;/p>
&lt;hr>
&lt;h2 id="la-voce-e-lo-stile">La voce e lo stile
&lt;/h2>&lt;p>La voce di Tony Loffa è &lt;strong>profonda, sporca, piena di aria e di strada&lt;/strong>.&lt;br>
Non punta alla perfezione, non cerca l’autotune impeccabile: è &lt;strong>grezza per scelta&lt;/strong>, volutamente imperfetta, come se portasse addosso l’odore delle periferie che racconta.&lt;/p>
&lt;p>Tony non canta: &lt;strong>sputa parole&lt;/strong>.&lt;br>
Ogni verso è corto, secco, diretto, come un colpo di beat. Alterna parlato e cantato, si ferma e riparte, creando un caos controllato che rende ogni traccia imprevedibile.&lt;/p>
&lt;p>Lo stile mescola slang romano, inglese maccheronico e termini inventati, costruendo un linguaggio &lt;strong>ibrido, gassoso, immediatamente riconoscibile&lt;/strong>. Nei testi non importa solo cosa viene detto, ma &lt;strong>come&lt;/strong> viene detto: tronfio, sicuro di sé, mistico quando parla della &lt;strong>Gang Gassosa&lt;/strong>, ironico e autocelebrativo subito dopo.&lt;/p>
&lt;hr>
&lt;h2 id="il-processo-creativo">Il processo creativo
&lt;/h2>&lt;p>Per scrivere i testi di Tony Loffa ho deciso di sperimentare con le &lt;strong>IA generative&lt;/strong>, trattandole come strumenti creativi e non come autori. Io ho definito l’identità di Tony, il suo stile, i temi di ogni brano e buona parte dei contenuti, ma ho delegato la &lt;strong>composizione finale&lt;/strong> a un modello di intelligenza artificiale.&lt;/p>
&lt;p>Il mio lavoro è stato quello di &lt;strong>costruire prompt estremamente dettagliati&lt;/strong>: ogni richiesta includeva il tono, il ritmo, la voce, la struttura di strofa e ritornello, i riferimenti stilistici, perfino l’uso degli intercalari e delle onomatopee tipiche del personaggio.&lt;br>
L’obiettivo era generare testi &lt;strong>“digeribili”&lt;/strong> per l’IA successiva, &lt;a class="link" href="https://suno.com" target="_blank" rel="noopener"
>&lt;strong>Suno AI&lt;/strong>&lt;/a>, che si sarebbe occupata della &lt;strong>generazione musicale vera e propria&lt;/strong>.&lt;/p>
&lt;p>Con Suno, ogni prompt definiva voce, beat e mood complessivo: funk sporco, trap grottesca, atmosfera urbana, toni ironici e aggressivi. Io ho controllato e rifinito ogni brano, adattando i testi per mantenere la coerenza del personaggio e la credibilità del risultato.&lt;/p>
&lt;p>Tony Loffa è nato da una &lt;strong>scrittura a quattro mani&lt;/strong>: da un lato la mia visione creativa, dall’altro la capacità combinata di IA testuale e musicale di trasformare quelle idee in un progetto sonoro completo. Questo approccio mi ha permesso di sperimentare uno stile ibrido: satirico, sporco, ma con un flow che &lt;strong>suona&lt;/strong> autentico.&lt;/p>
&lt;hr>
&lt;h2 id="il-risultato-un-rapper-coerente-una-critica-inattesa">Il risultato: un rapper coerente, una critica inattesa
&lt;/h2>&lt;p>Quello che era nato come un esperimento è diventato qualcosa di più.&lt;br>
Doveva essere solo una battuta, ma Tony Loffa &lt;strong>ha un’identità, una voce, una discografia, una gang immaginaria e un mondo narrativo coerente&lt;/strong>, con brani come &lt;em>Aria Condizionata&lt;/em>, &lt;em>Puzza di Soldi&lt;/em> e &lt;em>Gang Gassosa&lt;/em>.&lt;/p>
&lt;p>Ed è qui che l’esperimento è diventato interessante: senza volerlo, &lt;strong>Tony Loffa è anche una critica al culto dell’effimero&lt;/strong>.&lt;br>
La trap che parodizza vive di icone usa-e-getta, di personaggi costruiti più sull’immagine che sulla sostanza, e l’IA amplifica questa dinamica: un personaggio totalmente inventato diventa immediatamente &lt;strong>plausibile&lt;/strong>. Tony è un’illusione… che funziona proprio perché il mondo che rappresenta &lt;strong>è già un po’ un’illusione&lt;/strong>.&lt;/p>
&lt;p>In questo senso, Tony Loffa è sia &lt;strong>gioco narrativo&lt;/strong> che &lt;strong>commento sociale&lt;/strong>:&lt;br>
un personaggio nato per ridere della scena musicale, ma che finisce per far riflettere su come oggi costruiamo identità, su quanto crediamo a quello che vediamo, e su come il confine tra realtà e finzione sia sempre più sottile.&lt;/p>
&lt;hr>
&lt;h2 id="il-prompt">Il prompt
&lt;/h2>&lt;p>Scrivere una canzone per Tony Loffa non significava solo inventare dei testi: dovevo creare prompt dettagliati che catturassero tono, ritmo, linguaggio e atmosfera.
Ho trattato l’IA come un collaboratore, dandole tutte le informazioni necessarie per entrare nella testa di Tony: struttura della canzone, tipo di beat, temi da affrontare, slang da usare e perfino le interiezioni tipiche del personaggio.
Ogni prompt è stato pensato per essere digeribile da Suno AI, in modo che la generazione musicale fosse il più possibile coerente con lo stile del personaggio.&lt;/p>
&lt;p>Questo è un esempio
di prompt che ho usato per generare il testo di &lt;em>Puzza di Soldi&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>Agisci come un esperto compositore di musica e canzoni. Ti fornirò le informazioni sulle quali basarti e tu creerai una canzone.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usa la lingua italiana per le interazioni con me.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mi chiederai le informazioni necessarie alla creazione della canzone:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Di cosa parla
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Se c&amp;#39;è uno stile particolare da seguire (es. epico orchestrale, rock elettronico, ballata da taverna, ecc.)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> In che lingua deve essere scritto il testo della canzone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Se ci sono ruoli di voce specifici o strutture particolari (es. call-and-response, dialoghi tra personaggi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Qualsiasi altro dettaglio utile (ambientazione, epoca storica, atmosfera, strumenti preferiti, tono emotivo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Il pezzo musicale deve avere i titoli delle sezioni in inglese tra parentesi quadre.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I titoli delle sezioni fanno riferimento al tipo di sezione del pezzo musicale (es. [Chorus], [Verse 1], [Verse 2], [Bridge], ecc.).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Puoi indicare anche il ruolo o il tipo di voce che canta ogni parte, sempre in inglese, all’inizio della riga:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Esempio: [Bard], [Chorus - Drunks], [Whispered Voices], [Narrator], ecc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Eventuali informazioni aggiuntive (voce maschile o femminile, crescendo di violini, rap veloce, cori epici, ecc.) vanno inserite in una riga diversa dal titolo della sezione, sempre tra parentesi quadre.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Specifica sempre una sezione finale [Style] in inglese che descriva:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Strumenti
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Atmosfera
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Intensità
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Tipo di voce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Eventuali effetti sonori di contorno (taverna rumorosa, tempesta, folla, ecc.)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Il testo della canzone può essere in qualsiasi lingua scelta dall’utente, ma:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Le indicazioni tecniche (ruoli, strumenti, stile, descrizioni) devono essere sempre in inglese.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Per creare il testo, chiedi:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">1.&lt;/span> Tema e contenuto della canzone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">2.&lt;/span> Stile musicale
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">3.&lt;/span> Lingua del testo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">4.&lt;/span> Tono e atmosfera (eroico, drammatico, ironico, burlesco, ecc.)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">5.&lt;/span> Ambientazione (se rilevante)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">6.&lt;/span> Eventuali ruoli di voce e struttura (es. call-and-response)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ovviamente il prompt da solo non basta e a seguito di quello, per ogni pezzo, ci sono state innumerevoli interazioni con l&amp;rsquo;IA per raffinare, correggere, inserire nuove parti e tagliarne di altre.
L&amp;rsquo;IA è uno strumento ma senza creatività il risultato è piatto e io volevo che i pezzi avessero un minimo di personalità.
Ci è voluto un po&amp;rsquo; e si vede, anzi si sente, perché la prima traccia &amp;ldquo;Loffa e Nanna&amp;rdquo; è la meno riuscita.&lt;/p>
&lt;p>Per ogni traccia poi c&amp;rsquo;è stato anche un processo di raffinamento: generavo la canzone su Suno, ascoltavo e puntualmente c&amp;rsquo;erano delle modifiche da fare per ritmo, rime sghembe, oppure frasi che semplicemente non &amp;ldquo;suonavano&amp;rdquo;. Quindi dopo una serie di rimbalzi tra IA, correzioni, Suno, altre correzioni finalmente avevo una versione che potevo considerare definitiva.&lt;/p>
&lt;hr>
&lt;h2 id="la-distribuzione">La distribuzione
&lt;/h2>&lt;p>Una volta completato Aria Pesante, non potevo fermarmi lì.
Ho deciso di caricare l’album su &lt;a class="link" href="https://www.routenote.com" target="_blank" rel="noopener"
>RouteNote&lt;/a> per distribuirlo sulle principali piattaforme di streaming: Spotify, Apple Music, Amazon Music e molte altre.&lt;/p>
&lt;p>Non l’ho fatto per soldi — so perfettamente che non diventerò ricco con la Gang Gassosa — ma per sfizio personale.
L’idea che Tony Loffa, nato da una battuta, possa comparire accanto ad artisti veri in playlist reali mi diverte e mi affascina allo stesso tempo. È un po’ come completare il cerchio: un personaggio immaginario che invade il mondo reale.&lt;/p>
&lt;p>Se vi venisse la curiosità di ascoltarlo trovate qui i riferimenti &lt;a class="link" href="https://push.fm/fl/lbewxjfs" target="_blank" rel="noopener"
>https://push.fm/fl/lbewxjfs&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="conclusione">Conclusione
&lt;/h2>&lt;p>La parte più ironica? &lt;strong>A me la trap nemmeno piace&lt;/strong>.&lt;br>
Tony Loffa è nato per scherzo, ma è diventato un progetto coerente, credibile e satirico.&lt;br>
Forse, in un mondo dove l’immagine conta più della sostanza, &lt;strong>basta un nome e una buona storia per sembrare reali&lt;/strong>.&lt;/p>
&lt;hr>
&lt;div class="tony-card" style="
display: flex;
flex-direction: column;
align-items: center;
background-color: #1e1e1e;
border-radius: 16px;
padding: 20px;
max-width: 450px;
margin: 2rem auto;
box-shadow: 0 4px 20px rgba(0,0,0,0.3);
">
&lt;img src="https://procionegobbo.it/blog/tony-loffa-card.jpg" alt="Tony Loffa" style="
border-radius: 12px;
width: 100%;
object-fit: cover;
margin-bottom: 15px;
">
&lt;h2 style="color: #fff; margin: 0;">Tony Loffa&lt;/h2>
&lt;p style="color: #aaa; font-style: italic; margin: 4px 0 12px;">
“Zero compromessi, zero filtri, solo essenza gassosa.”
&lt;/p>
&lt;ul style="list-style: none; padding: 0; margin: 0; color: #ddd; font-size: 14px;">
&lt;li>&lt;strong>📍 Nato a:&lt;/strong> Centocelle, Roma&lt;/li>
&lt;li>&lt;strong>📅 Anno di nascita:&lt;/strong> 1995 (forse)&lt;/li>
&lt;li>&lt;strong>🎤 Genere:&lt;/strong> Trap gassosa, funk sporco, beat corrosivi&lt;/li>
&lt;li>&lt;strong>💨 Filosofia:&lt;/strong> Purismo gassoso — niente featuring, niente festival, niente compromessi&lt;/li>
&lt;li>&lt;strong>📀 Album:&lt;/strong> &lt;a href="https://push.fm/fl/lbewxjfs">&lt;em>Aria Pesante&lt;/em> (2025)&lt;/a>&lt;/li>
&lt;li>&lt;strong>👑 Crew:&lt;/strong> Gang Gassosa&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go</title><link>https://procionegobbo.it/blog/read-methods-golang/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/read-methods-golang/</guid><description>&lt;img src="https://procionegobbo.it/blog/read-methods-golang/bufioreader.png" alt="Featured image of post Confronto tra ReadRune, ReadBytes, ReadString e ReadLine in Go" />&lt;h1 id="-confronto-metodi-di-bufioreader-in-go">📚 Confronto metodi di &lt;code>bufio.Reader&lt;/code> in Go
&lt;/h1>&lt;h2 id="introduzione">Introduzione
&lt;/h2>&lt;p>Recentemente sto studiando &lt;a class="link" href="https://go.dev/" target="_blank" rel="noopener"
>Go&lt;/a>, linguaggio interessante e per me è un ritorno (ho iniziato a programmare col C) ad un tipo di programmazione profondamente diversa da quella che ho praticato negli ultimi anni specializzandomi su PHP/Laravel.
Una delle cose che mi interessano è come leggere e scrivere da uno stream quindi, con l&amp;rsquo;aiuto di una IA mi sono fatto un veloce riepilogo delle differenze tra alcuni metodi della libreria &lt;code>bufio&lt;/code>.&lt;/p>
&lt;p>I metodi &lt;strong>&lt;code>ReadRune&lt;/code>&lt;/strong>, &lt;strong>&lt;code>ReadBytes&lt;/code>&lt;/strong>, &lt;strong>&lt;code>ReadString&lt;/code>&lt;/strong> e &lt;strong>&lt;code>ReadLine&lt;/code>&lt;/strong> sono molto simili ma solo in apparenza.
Ecco una guida rapida per capire le differenze.&lt;/p>
&lt;hr>
&lt;h2 id="tabella-comparativa">Tabella comparativa
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Metodo&lt;/th>
&lt;th>Firma&lt;/th>
&lt;th>Cosa legge&lt;/th>
&lt;th>Tipo restituito&lt;/th>
&lt;th>Include &lt;code>\n&lt;/code>?&lt;/th>
&lt;th>Note pratiche&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>ReadRune()&lt;/strong>&lt;/td>
&lt;td>&lt;code>(r rune, size int, err error)&lt;/code>&lt;/td>
&lt;td>&lt;strong>Un singolo carattere Unicode&lt;/strong> (1 rune)&lt;/td>
&lt;td>&lt;code>rune&lt;/code> (+size+err)&lt;/td>
&lt;td>N/A (legge solo 1 carattere)&lt;/td>
&lt;td>Utile per analizzare caratteri uno alla volta (UTF-8 safe).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReadBytes(delim byte)&lt;/strong>&lt;/td>
&lt;td>&lt;code>([]byte, error)&lt;/code>&lt;/td>
&lt;td>Fino a &lt;code>delim&lt;/code> incluso&lt;/td>
&lt;td>&lt;code>[]byte&lt;/code>&lt;/td>
&lt;td>✅ sì&lt;/td>
&lt;td>Restituisce slice di byte, ottimo per parsing binario o testo grezzo.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReadString(delim byte)&lt;/strong>&lt;/td>
&lt;td>&lt;code>(string, error)&lt;/code>&lt;/td>
&lt;td>Fino a &lt;code>delim&lt;/code> incluso&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>✅ sì&lt;/td>
&lt;td>Comodo se sai di leggere testo, meno efficiente di &lt;code>ReadBytes&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ReadLine()&lt;/strong>&lt;/td>
&lt;td>&lt;code>([]byte, isPrefix bool, error)&lt;/code>&lt;/td>
&lt;td>Una riga (senza &lt;code>\n&lt;/code>)&lt;/td>
&lt;td>&lt;code>[]byte&lt;/code> + &lt;code>isPrefix&lt;/code> + &lt;code>err&lt;/code>&lt;/td>
&lt;td>❌ no&lt;/td>
&lt;td>Se la riga è troppo lunga, la restituisce a pezzi (&lt;code>isPrefix = true&lt;/code>). Serve loop per ricomporla. Più basso livello.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-diagramma-di-flusso-decisionale">🔀 Diagramma di flusso decisionale
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> ┌──────────────────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Vuoi leggere 1 carattere? │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────┬──────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────▼─────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Usa ReadRune() │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────────────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Vuoi leggere fino a un │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ delimitatore (es. &amp;#39;\n&amp;#39;)? │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────┬──────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────────────┼─────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────▼──────────┐ | ┌──────────▼───────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Ti serve un []byte? │ | │ Ti serve una stringa?│
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └──────────┬──────────┘ | └───────────┬──────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ | │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────▼──────────┐ | ┌───────────▼───────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Usa ReadBytes() │ | │ Usa ReadString() │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─────────────────────┘ | └───────────────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌──────────────────────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Devi gestire linee molto │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ lunghe (buffer a pezzi)? │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────┬──────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────────▼─────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ Usa ReadLine() │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └───────────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="esempio-pratico">Esempio pratico
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bufio&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bytes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;café\nseconda linea\nterza linea senza newline finale&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadRune(): legge un singolo carattere Unicode alla volta ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadRune() ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">4&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> { &lt;span style="color:#75715e">// leggo le prime 4 rune: c, a, f, é&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ru&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadRune&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Errore ReadRune:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;rune=%q size=%d\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ru&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadBytes(&amp;#39;\n&amp;#39;): legge fino al delimitatore incluso e restituisce []byte ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadBytes(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadBytes&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Errore ReadBytes:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ReadBytes: %q (len=%d)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>, len(&lt;span style="color:#a6e22e">b&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadString(&amp;#39;\n&amp;#39;): stesso comportamento ma restituisce string ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadString(&amp;#39;\\n&amp;#39;) ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadString&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Errore ReadString:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ReadString: %q (len=%d)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>, len(&lt;span style="color:#a6e22e">s&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- ReadLine(): NON include &amp;#39;\n&amp;#39; e può restituire porzioni (isPrefix=true) ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Forziamo una linea più lunga del buffer per vedere isPrefix=true.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadLine() con buffer piccolo e isPrefix ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">longLine&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;abcdefghij\n&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 10 caratteri + &amp;#39;\n&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">smallBuf&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReaderSize&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">longLine&lt;/span>), &lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">parts&lt;/span> [][]&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">smallBuf&lt;/span>.&lt;span style="color:#a6e22e">ReadLine&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// fine input o errore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Copia difensiva del frammento letto&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">parts&lt;/span> = append(&lt;span style="color:#a6e22e">parts&lt;/span>, append([]byte(&lt;span style="color:#66d9ef">nil&lt;/span>), &lt;span style="color:#a6e22e">line&lt;/span>&lt;span style="color:#f92672">...&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;chunk=%q isPrefix=%v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">isPrefix&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">recombined&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">parts&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Ricomposta: %q (pezzi=%d)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">recombined&lt;/span>, len(&lt;span style="color:#a6e22e">parts&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// --- Esempio classico di ReadLine su testo normale (senza superare il buffer) ---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;== ReadLine() normale ==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> = &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">ReadLine&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;line=%q isPrefix=%v (niente &amp;#39;\\n&amp;#39;)\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#a6e22e">isPrefix&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusioni">Conclusioni
&lt;/h2>&lt;h3 id="in-sintesi-veloce">In sintesi veloce:
&lt;/h3>&lt;ul>
&lt;li>&lt;code>ReadRune&lt;/code> → analisi carattere-per-carattere, sicuro su UTF-8.&lt;/li>
&lt;li>&lt;code>ReadBytes&lt;/code> → legge fino al delimitatore e restituisce &lt;code>[]byte&lt;/code> (ottimo per parsing binario/grezzo).&lt;/li>
&lt;li>&lt;code>ReadString&lt;/code> → come sopra ma restituisce string (più comodo, più allocazioni).&lt;/li>
&lt;li>&lt;code>ReadLine&lt;/code> → non include &lt;code>\n&lt;/code>, gestisce linee molto lunghe a pezzi con &lt;code>isPrefix&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="insidie-comuni-da-ricordare">Insidie comuni da ricordare:
&lt;/h3>&lt;ul>
&lt;li>Fine riga su Windows è &lt;code>\r\n&lt;/code>: rimuovi il &lt;code>\r&lt;/code> finale se leggi fino a &lt;code>\n&lt;/code>.&lt;/li>
&lt;li>&lt;code>bufio.Scanner&lt;/code> ha un limite di token (≈64 KB) che va aumentato per righe grandi.&lt;/li>
&lt;li>Le allocazioni: &lt;code>ReadString&lt;/code> crea sempre una nuova stringa; con &lt;code>ReadBytes&lt;/code> puoi restare su &lt;code>[]byte&lt;/code> finché serve.&lt;/li>
&lt;/ul>
&lt;h3 id="cosa-usare-quando">Cosa usare quando:
&lt;/h3>&lt;ul>
&lt;li>Parsing binario o attenzione alle allocazioni → &lt;code>ReadBytes&lt;/code>.&lt;/li>
&lt;li>Input testuale “line-oriented” → &lt;code>ReadString&lt;/code> (oppure Scanner).&lt;/li>
&lt;li>Analisi fine di rune (accenti/emoji) → &lt;code>ReadRune&lt;/code>.&lt;/li>
&lt;li>Log/file con righe enormi → &lt;code>ReadLine&lt;/code> (ricomponi quando &lt;code>isPrefix&lt;/code> == true).&lt;/li>
&lt;/ul></description></item><item><title>Ciao mondo</title><link>https://procionegobbo.it/blog/hello-world/</link><pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate><guid>https://procionegobbo.it/blog/hello-world/</guid><description>&lt;p>Sono passati 21 anni dal mio primo blog, il mondo è cambiato, internet è cambiato e io anche.&lt;/p>
&lt;p>It’s been 21 years since my first blog — the world has changed, the internet has changed, and so have I.&lt;/p></description></item></channel></rss>